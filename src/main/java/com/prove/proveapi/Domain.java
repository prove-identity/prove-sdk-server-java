/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi;

import static com.prove.proveapi.operations.Operations.RequestOperation;
import static com.prove.proveapi.operations.Operations.RequestlessOperation;

import com.prove.proveapi.models.components.V3DomainConfirmLinkRequest;
import com.prove.proveapi.models.components.V3DomainLinkRequest;
import com.prove.proveapi.models.components.V3DomainUnlinkRequest;
import com.prove.proveapi.models.operations.V3DomainConfirmLinkRequestRequestBuilder;
import com.prove.proveapi.models.operations.V3DomainConfirmLinkRequestResponse;
import com.prove.proveapi.models.operations.V3DomainIDRequestRequestBuilder;
import com.prove.proveapi.models.operations.V3DomainIDRequestResponse;
import com.prove.proveapi.models.operations.V3DomainLinkRequestRequestBuilder;
import com.prove.proveapi.models.operations.V3DomainLinkRequestResponse;
import com.prove.proveapi.models.operations.V3DomainLinkedRequestRequestBuilder;
import com.prove.proveapi.models.operations.V3DomainLinkedRequestResponse;
import com.prove.proveapi.models.operations.V3DomainUnlinkRequestRequestBuilder;
import com.prove.proveapi.models.operations.V3DomainUnlinkRequestResponse;
import com.prove.proveapi.operations.V3DomainIDRequest;
import com.prove.proveapi.operations.V3DomainLinkedRequest;
import java.lang.Exception;
import java.util.Optional;


public class Domain {
    private final SDKConfiguration sdkConfiguration;

    Domain(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Confirm a domain link request
     * 
     * <p>Confirms a given domain link request by validating the PCID.
     * 
     * @return The call builder
     */
    public V3DomainConfirmLinkRequestRequestBuilder v3DomainConfirmLinkRequest() {
        return new V3DomainConfirmLinkRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Confirm a domain link request
     * 
     * <p>Confirms a given domain link request by validating the PCID.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DomainConfirmLinkRequestResponse v3DomainConfirmLinkRequestDirect() throws Exception {
        return v3DomainConfirmLinkRequest(Optional.empty());
    }

    /**
     * Confirm a domain link request
     * 
     * <p>Confirms a given domain link request by validating the PCID.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DomainConfirmLinkRequestResponse v3DomainConfirmLinkRequest(Optional<? extends V3DomainConfirmLinkRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3DomainConfirmLinkRequest>, V3DomainConfirmLinkRequestResponse> operation
              = new com.prove.proveapi.operations.V3DomainConfirmLinkRequest.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Domain Details
     * 
     * <p>Returns the domain details.
     * 
     * @return The call builder
     */
    public V3DomainIDRequestRequestBuilder v3DomainIDRequest() {
        return new V3DomainIDRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Domain Details
     * 
     * <p>Returns the domain details.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DomainIDRequestResponse v3DomainIDRequestDirect() throws Exception {
        RequestlessOperation<V3DomainIDRequestResponse> operation
            = new V3DomainIDRequest.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Request a domain link
     * 
     * <p>Create a request to connect the requested domain to the domain the request is made from.
     * 
     * @return The call builder
     */
    public V3DomainLinkRequestRequestBuilder v3DomainLinkRequest() {
        return new V3DomainLinkRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Request a domain link
     * 
     * <p>Create a request to connect the requested domain to the domain the request is made from.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DomainLinkRequestResponse v3DomainLinkRequestDirect() throws Exception {
        return v3DomainLinkRequest(Optional.empty());
    }

    /**
     * Request a domain link
     * 
     * <p>Create a request to connect the requested domain to the domain the request is made from.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DomainLinkRequestResponse v3DomainLinkRequest(Optional<? extends V3DomainLinkRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3DomainLinkRequest>, V3DomainLinkRequestResponse> operation
              = new com.prove.proveapi.operations.V3DomainLinkRequest.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get the list of domains that are linked to this domain.
     * 
     * <p>Returns the accepted and pending links for this domain.
     * 
     * @return The call builder
     */
    public V3DomainLinkedRequestRequestBuilder v3DomainLinkedRequest() {
        return new V3DomainLinkedRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Get the list of domains that are linked to this domain.
     * 
     * <p>Returns the accepted and pending links for this domain.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DomainLinkedRequestResponse v3DomainLinkedRequestDirect() throws Exception {
        RequestlessOperation<V3DomainLinkedRequestResponse> operation
            = new V3DomainLinkedRequest.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Remove a domain link or request
     * 
     * <p>Remove a domain link or request between the requested domain and the domain the request is made from.
     * 
     * @return The call builder
     */
    public V3DomainUnlinkRequestRequestBuilder v3DomainUnlinkRequest() {
        return new V3DomainUnlinkRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a domain link or request
     * 
     * <p>Remove a domain link or request between the requested domain and the domain the request is made from.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DomainUnlinkRequestResponse v3DomainUnlinkRequestDirect() throws Exception {
        return v3DomainUnlinkRequest(Optional.empty());
    }

    /**
     * Remove a domain link or request
     * 
     * <p>Remove a domain link or request between the requested domain and the domain the request is made from.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DomainUnlinkRequestResponse v3DomainUnlinkRequest(Optional<? extends V3DomainUnlinkRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3DomainUnlinkRequest>, V3DomainUnlinkRequestResponse> operation
              = new com.prove.proveapi.operations.V3DomainUnlinkRequest.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
