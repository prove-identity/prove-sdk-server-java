/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi;

import static com.prove.proveapi.operations.Operations.RequestOperation;
import static com.prove.proveapi.operations.Operations.RequestlessOperation;

import com.prove.proveapi.models.components.V3DomainLinkRequest;
import com.prove.proveapi.models.components.V3DomainUnlinkRequest;
import com.prove.proveapi.models.operations.V3DomainIDRequestBuilder;
import com.prove.proveapi.models.operations.V3DomainIDResponse;
import com.prove.proveapi.models.operations.V3DomainLinkRequestBuilder;
import com.prove.proveapi.models.operations.V3DomainLinkResponse;
import com.prove.proveapi.models.operations.V3DomainLinkedRequestBuilder;
import com.prove.proveapi.models.operations.V3DomainLinkedResponse;
import com.prove.proveapi.models.operations.V3DomainUnlinkRequestBuilder;
import com.prove.proveapi.models.operations.V3DomainUnlinkResponse;
import com.prove.proveapi.operations.V3DomainID;
import com.prove.proveapi.operations.V3DomainLink;
import com.prove.proveapi.operations.V3DomainLinked;
import com.prove.proveapi.operations.V3DomainUnlink;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class Domain {
    private final SDKConfiguration sdkConfiguration;

    Domain(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Get Domain Details
     * 
     * <p>Returns the domain details.
     * 
     * @return The call builder
     */
    public V3DomainIDRequestBuilder v3DomainID() {
        return new V3DomainIDRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Domain Details
     * 
     * <p>Returns the domain details.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DomainIDResponse v3DomainIDDirect() throws Exception {
        return v3DomainID(Optional.empty());
    }

    /**
     * Get Domain Details
     * 
     * <p>Returns the domain details.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DomainIDResponse v3DomainID(Optional<String> request) throws Exception {
        RequestOperation<Optional<String>, V3DomainIDResponse> operation
              = new V3DomainID.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * # Create a request to connect the requested domain to the domain the request is made from.
     * 
     * @return The call builder
     */
    public V3DomainLinkRequestBuilder v3DomainLink() {
        return new V3DomainLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * # Create a request to connect the requested domain to the domain the request is made from.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DomainLinkResponse v3DomainLinkDirect() throws Exception {
        return v3DomainLink(Optional.empty());
    }

    /**
     * # Create a request to connect the requested domain to the domain the request is made from.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DomainLinkResponse v3DomainLink(Optional<? extends V3DomainLinkRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3DomainLinkRequest>, V3DomainLinkResponse> operation
              = new V3DomainLink.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get the list of domains that are linked to this domain.
     * 
     * <p>Returns the accepted and pending links for this domain.
     * 
     * @return The call builder
     */
    public V3DomainLinkedRequestBuilder v3DomainLinked() {
        return new V3DomainLinkedRequestBuilder(sdkConfiguration);
    }

    /**
     * Get the list of domains that are linked to this domain.
     * 
     * <p>Returns the accepted and pending links for this domain.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DomainLinkedResponse v3DomainLinkedDirect() throws Exception {
        RequestlessOperation<V3DomainLinkedResponse> operation
            = new V3DomainLinked.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * # Remove a domain link or request.
     * 
     * @return The call builder
     */
    public V3DomainUnlinkRequestBuilder v3DomainUnlink() {
        return new V3DomainUnlinkRequestBuilder(sdkConfiguration);
    }

    /**
     * # Remove a domain link or request.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DomainUnlinkResponse v3DomainUnlinkDirect() throws Exception {
        return v3DomainUnlink(Optional.empty());
    }

    /**
     * # Remove a domain link or request.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DomainUnlinkResponse v3DomainUnlink(Optional<? extends V3DomainUnlinkRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3DomainUnlinkRequest>, V3DomainUnlinkResponse> operation
              = new V3DomainUnlink.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
