/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class V3ChallengeIndividualRequest {

    /**
     * An array of addresses that belong to the individual.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends List<V3ChallengeAddressEntryRequest>> addresses;

    /**
     * The date of birth of the individual.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dob")
    private Optional<String> dob;

    /**
     * An array of email addresses that belong to the individual.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailAddresses")
    private Optional<? extends List<String>> emailAddresses;

    /**
     * The first name of the individual.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstName")
    private Optional<String> firstName;

    /**
     * The last name of the individual.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastName")
    private Optional<String> lastName;

    /**
     * The social security number of the individual.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssn")
    private Optional<String> ssn;

    @JsonCreator
    public V3ChallengeIndividualRequest(
            @JsonProperty("addresses") Optional<? extends List<V3ChallengeAddressEntryRequest>> addresses,
            @JsonProperty("dob") Optional<String> dob,
            @JsonProperty("emailAddresses") Optional<? extends List<String>> emailAddresses,
            @JsonProperty("firstName") Optional<String> firstName,
            @JsonProperty("lastName") Optional<String> lastName,
            @JsonProperty("ssn") Optional<String> ssn) {
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(dob, "dob");
        Utils.checkNotNull(emailAddresses, "emailAddresses");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(ssn, "ssn");
        this.addresses = addresses;
        this.dob = dob;
        this.emailAddresses = emailAddresses;
        this.firstName = firstName;
        this.lastName = lastName;
        this.ssn = ssn;
    }
    
    public V3ChallengeIndividualRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * An array of addresses that belong to the individual.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<V3ChallengeAddressEntryRequest>> addresses() {
        return (Optional<List<V3ChallengeAddressEntryRequest>>) addresses;
    }

    /**
     * The date of birth of the individual.
     */
    @JsonIgnore
    public Optional<String> dob() {
        return dob;
    }

    /**
     * An array of email addresses that belong to the individual.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> emailAddresses() {
        return (Optional<List<String>>) emailAddresses;
    }

    /**
     * The first name of the individual.
     */
    @JsonIgnore
    public Optional<String> firstName() {
        return firstName;
    }

    /**
     * The last name of the individual.
     */
    @JsonIgnore
    public Optional<String> lastName() {
        return lastName;
    }

    /**
     * The social security number of the individual.
     */
    @JsonIgnore
    public Optional<String> ssn() {
        return ssn;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * An array of addresses that belong to the individual.
     */
    public V3ChallengeIndividualRequest withAddresses(List<V3ChallengeAddressEntryRequest> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }

    /**
     * An array of addresses that belong to the individual.
     */
    public V3ChallengeIndividualRequest withAddresses(Optional<? extends List<V3ChallengeAddressEntryRequest>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    /**
     * The date of birth of the individual.
     */
    public V3ChallengeIndividualRequest withDob(String dob) {
        Utils.checkNotNull(dob, "dob");
        this.dob = Optional.ofNullable(dob);
        return this;
    }

    /**
     * The date of birth of the individual.
     */
    public V3ChallengeIndividualRequest withDob(Optional<String> dob) {
        Utils.checkNotNull(dob, "dob");
        this.dob = dob;
        return this;
    }

    /**
     * An array of email addresses that belong to the individual.
     */
    public V3ChallengeIndividualRequest withEmailAddresses(List<String> emailAddresses) {
        Utils.checkNotNull(emailAddresses, "emailAddresses");
        this.emailAddresses = Optional.ofNullable(emailAddresses);
        return this;
    }

    /**
     * An array of email addresses that belong to the individual.
     */
    public V3ChallengeIndividualRequest withEmailAddresses(Optional<? extends List<String>> emailAddresses) {
        Utils.checkNotNull(emailAddresses, "emailAddresses");
        this.emailAddresses = emailAddresses;
        return this;
    }

    /**
     * The first name of the individual.
     */
    public V3ChallengeIndividualRequest withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }

    /**
     * The first name of the individual.
     */
    public V3ChallengeIndividualRequest withFirstName(Optional<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name of the individual.
     */
    public V3ChallengeIndividualRequest withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }

    /**
     * The last name of the individual.
     */
    public V3ChallengeIndividualRequest withLastName(Optional<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The social security number of the individual.
     */
    public V3ChallengeIndividualRequest withSsn(String ssn) {
        Utils.checkNotNull(ssn, "ssn");
        this.ssn = Optional.ofNullable(ssn);
        return this;
    }

    /**
     * The social security number of the individual.
     */
    public V3ChallengeIndividualRequest withSsn(Optional<String> ssn) {
        Utils.checkNotNull(ssn, "ssn");
        this.ssn = ssn;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3ChallengeIndividualRequest other = (V3ChallengeIndividualRequest) o;
        return 
            Objects.deepEquals(this.addresses, other.addresses) &&
            Objects.deepEquals(this.dob, other.dob) &&
            Objects.deepEquals(this.emailAddresses, other.emailAddresses) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.ssn, other.ssn);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            addresses,
            dob,
            emailAddresses,
            firstName,
            lastName,
            ssn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3ChallengeIndividualRequest.class,
                "addresses", addresses,
                "dob", dob,
                "emailAddresses", emailAddresses,
                "firstName", firstName,
                "lastName", lastName,
                "ssn", ssn);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<V3ChallengeAddressEntryRequest>> addresses = Optional.empty();
 
        private Optional<String> dob = Optional.empty();
 
        private Optional<? extends List<String>> emailAddresses = Optional.empty();
 
        private Optional<String> firstName = Optional.empty();
 
        private Optional<String> lastName = Optional.empty();
 
        private Optional<String> ssn = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An array of addresses that belong to the individual.
         */
        public Builder addresses(List<V3ChallengeAddressEntryRequest> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        /**
         * An array of addresses that belong to the individual.
         */
        public Builder addresses(Optional<? extends List<V3ChallengeAddressEntryRequest>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }

        /**
         * The date of birth of the individual.
         */
        public Builder dob(String dob) {
            Utils.checkNotNull(dob, "dob");
            this.dob = Optional.ofNullable(dob);
            return this;
        }

        /**
         * The date of birth of the individual.
         */
        public Builder dob(Optional<String> dob) {
            Utils.checkNotNull(dob, "dob");
            this.dob = dob;
            return this;
        }

        /**
         * An array of email addresses that belong to the individual.
         */
        public Builder emailAddresses(List<String> emailAddresses) {
            Utils.checkNotNull(emailAddresses, "emailAddresses");
            this.emailAddresses = Optional.ofNullable(emailAddresses);
            return this;
        }

        /**
         * An array of email addresses that belong to the individual.
         */
        public Builder emailAddresses(Optional<? extends List<String>> emailAddresses) {
            Utils.checkNotNull(emailAddresses, "emailAddresses");
            this.emailAddresses = emailAddresses;
            return this;
        }

        /**
         * The first name of the individual.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        /**
         * The first name of the individual.
         */
        public Builder firstName(Optional<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The last name of the individual.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        /**
         * The last name of the individual.
         */
        public Builder lastName(Optional<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * The social security number of the individual.
         */
        public Builder ssn(String ssn) {
            Utils.checkNotNull(ssn, "ssn");
            this.ssn = Optional.ofNullable(ssn);
            return this;
        }

        /**
         * The social security number of the individual.
         */
        public Builder ssn(Optional<String> ssn) {
            Utils.checkNotNull(ssn, "ssn");
            this.ssn = ssn;
            return this;
        }
        
        public V3ChallengeIndividualRequest build() {
            return new V3ChallengeIndividualRequest(
                addresses,
                dob,
                emailAddresses,
                firstName,
                lastName,
                ssn);
        }
    }
}
