/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class V3UnifyRequest {

    /**
     * A client-generated unique ID for a specific customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientCustomerId")
    private Optional<String> clientCustomerId;

    /**
     * A client-generated unique ID for a specific session.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientRequestId")
    private Optional<String> clientRequestId;

    /**
     * The final target URL is where the end user will be redirected at the end of Instant Link flow. Required when `possessionType=desktop`.
     * Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("finalTargetUrl")
    private Optional<String> finalTargetUrl;

    /**
     * The number of the mobile phone. Optional in US, required in EU.
     * Not allowed when possessionType is `none`. Acceptable characters are:
     * alphanumeric with symbols '+'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumber")
    private Optional<String> phoneNumber;

    /**
     * The type of device being used - either `desktop` if using a desktop,
     * `mobile` for iOS/Android native apps and mobile web, or `none` if no possession
     * check is required.
     */
    @JsonProperty("possessionType")
    private String possessionType;

    /**
     * The message body sent in the
     * Instant Link (`possessionType=desktop`) or OTP (`possessionType=mobile`) SMS message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smsMessage")
    private Optional<String> smsMessage;

    @JsonCreator
    public V3UnifyRequest(
            @JsonProperty("clientCustomerId") Optional<String> clientCustomerId,
            @JsonProperty("clientRequestId") Optional<String> clientRequestId,
            @JsonProperty("finalTargetUrl") Optional<String> finalTargetUrl,
            @JsonProperty("phoneNumber") Optional<String> phoneNumber,
            @JsonProperty("possessionType") String possessionType,
            @JsonProperty("smsMessage") Optional<String> smsMessage) {
        Utils.checkNotNull(clientCustomerId, "clientCustomerId");
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(possessionType, "possessionType");
        Utils.checkNotNull(smsMessage, "smsMessage");
        this.clientCustomerId = clientCustomerId;
        this.clientRequestId = clientRequestId;
        this.finalTargetUrl = finalTargetUrl;
        this.phoneNumber = phoneNumber;
        this.possessionType = possessionType;
        this.smsMessage = smsMessage;
    }
    
    public V3UnifyRequest(
            String possessionType) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), possessionType, Optional.empty());
    }

    /**
     * A client-generated unique ID for a specific customer.
     */
    @JsonIgnore
    public Optional<String> clientCustomerId() {
        return clientCustomerId;
    }

    /**
     * A client-generated unique ID for a specific session.
     */
    @JsonIgnore
    public Optional<String> clientRequestId() {
        return clientRequestId;
    }

    /**
     * The final target URL is where the end user will be redirected at the end of Instant Link flow. Required when `possessionType=desktop`.
     * Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
     */
    @JsonIgnore
    public Optional<String> finalTargetUrl() {
        return finalTargetUrl;
    }

    /**
     * The number of the mobile phone. Optional in US, required in EU.
     * Not allowed when possessionType is `none`. Acceptable characters are:
     * alphanumeric with symbols '+'.
     */
    @JsonIgnore
    public Optional<String> phoneNumber() {
        return phoneNumber;
    }

    /**
     * The type of device being used - either `desktop` if using a desktop,
     * `mobile` for iOS/Android native apps and mobile web, or `none` if no possession
     * check is required.
     */
    @JsonIgnore
    public String possessionType() {
        return possessionType;
    }

    /**
     * The message body sent in the
     * Instant Link (`possessionType=desktop`) or OTP (`possessionType=mobile`) SMS message.
     */
    @JsonIgnore
    public Optional<String> smsMessage() {
        return smsMessage;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A client-generated unique ID for a specific customer.
     */
    public V3UnifyRequest withClientCustomerId(String clientCustomerId) {
        Utils.checkNotNull(clientCustomerId, "clientCustomerId");
        this.clientCustomerId = Optional.ofNullable(clientCustomerId);
        return this;
    }

    /**
     * A client-generated unique ID for a specific customer.
     */
    public V3UnifyRequest withClientCustomerId(Optional<String> clientCustomerId) {
        Utils.checkNotNull(clientCustomerId, "clientCustomerId");
        this.clientCustomerId = clientCustomerId;
        return this;
    }

    /**
     * A client-generated unique ID for a specific session.
     */
    public V3UnifyRequest withClientRequestId(String clientRequestId) {
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        this.clientRequestId = Optional.ofNullable(clientRequestId);
        return this;
    }

    /**
     * A client-generated unique ID for a specific session.
     */
    public V3UnifyRequest withClientRequestId(Optional<String> clientRequestId) {
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        this.clientRequestId = clientRequestId;
        return this;
    }

    /**
     * The final target URL is where the end user will be redirected at the end of Instant Link flow. Required when `possessionType=desktop`.
     * Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
     */
    public V3UnifyRequest withFinalTargetUrl(String finalTargetUrl) {
        Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
        this.finalTargetUrl = Optional.ofNullable(finalTargetUrl);
        return this;
    }

    /**
     * The final target URL is where the end user will be redirected at the end of Instant Link flow. Required when `possessionType=desktop`.
     * Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
     */
    public V3UnifyRequest withFinalTargetUrl(Optional<String> finalTargetUrl) {
        Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
        this.finalTargetUrl = finalTargetUrl;
        return this;
    }

    /**
     * The number of the mobile phone. Optional in US, required in EU.
     * Not allowed when possessionType is `none`. Acceptable characters are:
     * alphanumeric with symbols '+'.
     */
    public V3UnifyRequest withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }

    /**
     * The number of the mobile phone. Optional in US, required in EU.
     * Not allowed when possessionType is `none`. Acceptable characters are:
     * alphanumeric with symbols '+'.
     */
    public V3UnifyRequest withPhoneNumber(Optional<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * The type of device being used - either `desktop` if using a desktop,
     * `mobile` for iOS/Android native apps and mobile web, or `none` if no possession
     * check is required.
     */
    public V3UnifyRequest withPossessionType(String possessionType) {
        Utils.checkNotNull(possessionType, "possessionType");
        this.possessionType = possessionType;
        return this;
    }

    /**
     * The message body sent in the
     * Instant Link (`possessionType=desktop`) or OTP (`possessionType=mobile`) SMS message.
     */
    public V3UnifyRequest withSmsMessage(String smsMessage) {
        Utils.checkNotNull(smsMessage, "smsMessage");
        this.smsMessage = Optional.ofNullable(smsMessage);
        return this;
    }

    /**
     * The message body sent in the
     * Instant Link (`possessionType=desktop`) or OTP (`possessionType=mobile`) SMS message.
     */
    public V3UnifyRequest withSmsMessage(Optional<String> smsMessage) {
        Utils.checkNotNull(smsMessage, "smsMessage");
        this.smsMessage = smsMessage;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3UnifyRequest other = (V3UnifyRequest) o;
        return 
            Objects.deepEquals(this.clientCustomerId, other.clientCustomerId) &&
            Objects.deepEquals(this.clientRequestId, other.clientRequestId) &&
            Objects.deepEquals(this.finalTargetUrl, other.finalTargetUrl) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            Objects.deepEquals(this.possessionType, other.possessionType) &&
            Objects.deepEquals(this.smsMessage, other.smsMessage);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientCustomerId,
            clientRequestId,
            finalTargetUrl,
            phoneNumber,
            possessionType,
            smsMessage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3UnifyRequest.class,
                "clientCustomerId", clientCustomerId,
                "clientRequestId", clientRequestId,
                "finalTargetUrl", finalTargetUrl,
                "phoneNumber", phoneNumber,
                "possessionType", possessionType,
                "smsMessage", smsMessage);
    }
    
    public final static class Builder {
 
        private Optional<String> clientCustomerId = Optional.empty();
 
        private Optional<String> clientRequestId = Optional.empty();
 
        private Optional<String> finalTargetUrl = Optional.empty();
 
        private Optional<String> phoneNumber = Optional.empty();
 
        private String possessionType;
 
        private Optional<String> smsMessage = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A client-generated unique ID for a specific customer.
         */
        public Builder clientCustomerId(String clientCustomerId) {
            Utils.checkNotNull(clientCustomerId, "clientCustomerId");
            this.clientCustomerId = Optional.ofNullable(clientCustomerId);
            return this;
        }

        /**
         * A client-generated unique ID for a specific customer.
         */
        public Builder clientCustomerId(Optional<String> clientCustomerId) {
            Utils.checkNotNull(clientCustomerId, "clientCustomerId");
            this.clientCustomerId = clientCustomerId;
            return this;
        }

        /**
         * A client-generated unique ID for a specific session.
         */
        public Builder clientRequestId(String clientRequestId) {
            Utils.checkNotNull(clientRequestId, "clientRequestId");
            this.clientRequestId = Optional.ofNullable(clientRequestId);
            return this;
        }

        /**
         * A client-generated unique ID for a specific session.
         */
        public Builder clientRequestId(Optional<String> clientRequestId) {
            Utils.checkNotNull(clientRequestId, "clientRequestId");
            this.clientRequestId = clientRequestId;
            return this;
        }

        /**
         * The final target URL is where the end user will be redirected at the end of Instant Link flow. Required when `possessionType=desktop`.
         * Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
         */
        public Builder finalTargetUrl(String finalTargetUrl) {
            Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
            this.finalTargetUrl = Optional.ofNullable(finalTargetUrl);
            return this;
        }

        /**
         * The final target URL is where the end user will be redirected at the end of Instant Link flow. Required when `possessionType=desktop`.
         * Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
         */
        public Builder finalTargetUrl(Optional<String> finalTargetUrl) {
            Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
            this.finalTargetUrl = finalTargetUrl;
            return this;
        }

        /**
         * The number of the mobile phone. Optional in US, required in EU.
         * Not allowed when possessionType is `none`. Acceptable characters are:
         * alphanumeric with symbols '+'.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * The number of the mobile phone. Optional in US, required in EU.
         * Not allowed when possessionType is `none`. Acceptable characters are:
         * alphanumeric with symbols '+'.
         */
        public Builder phoneNumber(Optional<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * The type of device being used - either `desktop` if using a desktop,
         * `mobile` for iOS/Android native apps and mobile web, or `none` if no possession
         * check is required.
         */
        public Builder possessionType(String possessionType) {
            Utils.checkNotNull(possessionType, "possessionType");
            this.possessionType = possessionType;
            return this;
        }

        /**
         * The message body sent in the
         * Instant Link (`possessionType=desktop`) or OTP (`possessionType=mobile`) SMS message.
         */
        public Builder smsMessage(String smsMessage) {
            Utils.checkNotNull(smsMessage, "smsMessage");
            this.smsMessage = Optional.ofNullable(smsMessage);
            return this;
        }

        /**
         * The message body sent in the
         * Instant Link (`possessionType=desktop`) or OTP (`possessionType=mobile`) SMS message.
         */
        public Builder smsMessage(Optional<String> smsMessage) {
            Utils.checkNotNull(smsMessage, "smsMessage");
            this.smsMessage = smsMessage;
            return this;
        }
        
        public V3UnifyRequest build() {
            return new V3UnifyRequest(
                clientCustomerId,
                clientRequestId,
                finalTargetUrl,
                phoneNumber,
                possessionType,
                smsMessage);
        }
    }
}
