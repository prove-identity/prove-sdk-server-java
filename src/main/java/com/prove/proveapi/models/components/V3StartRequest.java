/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class V3StartRequest {
    /**
     * If true, the customer can re-enter the OTP up to three times. Code must also be implemented. See client-side SDK guide for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowOTPRetry")
    private Optional<Boolean> allowOTPRetry;

    /**
     * The date of birth in one of these formats: YYYY-MM-DD, YYYY-MM, or MM-DD. Acceptable characters are: numeric with symbol '-'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dob")
    private Optional<String> dob;

    /**
     * The email address of the customer. Acceptable characters are: alphanumeric with symbols '@.+'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailAddress")
    private Optional<String> emailAddress;

    /**
     * The URL where the end user will be redirected at the end of the Instant Link flow. Required only when `flowType=desktop`. Acceptable characters are: alphanumeric with symbols '-._+=/:?'. Max length is 128 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("finalTargetUrl")
    private Optional<String> finalTargetUrl;

    /**
     * The type of device being user - either `desktop` for desktop web or `mobile` for iOS/Android native apps and mobile web.
     */
    @JsonProperty("flowType")
    private String flowType;

    /**
     * The IP address of the mobile device. Acceptable characters are: numeric with symbols ':.'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipAddress")
    private Optional<String> ipAddress;

    /**
     * The number of the mobile phone. Refer to the [Prove Pre-Fill Implementation guide](https://developer.prove.com/docs/prove-pre-fill-implementation-guide#implement-prove-pre-fill) and [Prove Identity Implementation guide](https://developer.prove.com/docs/prove-identity-implementation-guide#implement-prove-identity) for situations where this field is not required. Acceptable characters are: alphanumeric with symbols '+'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumber")
    private Optional<String> phoneNumber;

    /**
     * The message body sent in the Instant Link (`flowType=desktop`) or OTP (`flowType=mobile`) SMS message. If not provided, the following default messages will be used:
     * 
     * <p>Instant Link: "Complete your verification. If you did not make this request, do not click the link. ####" _The verification URL replaces ####._
     * 
     * <p>OTP: "#### is your temporary code to continue your application. Caution: for your security, don't share this code with anyone." _Use ####, #####, or ###### to generate 4-6 digit verification codes respectively._
     * 
     * <p>Max length is 160 characters. Non-ASCII characters are allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smsMessage")
    private Optional<String> smsMessage;

    /**
     * The full or last 4 digits of the social security number. Acceptable characters are: numeric.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssn")
    private Optional<String> ssn;

    @JsonCreator
    public V3StartRequest(
            @JsonProperty("allowOTPRetry") Optional<Boolean> allowOTPRetry,
            @JsonProperty("dob") Optional<String> dob,
            @JsonProperty("emailAddress") Optional<String> emailAddress,
            @JsonProperty("finalTargetUrl") Optional<String> finalTargetUrl,
            @JsonProperty("flowType") String flowType,
            @JsonProperty("ipAddress") Optional<String> ipAddress,
            @JsonProperty("phoneNumber") Optional<String> phoneNumber,
            @JsonProperty("smsMessage") Optional<String> smsMessage,
            @JsonProperty("ssn") Optional<String> ssn) {
        Utils.checkNotNull(allowOTPRetry, "allowOTPRetry");
        Utils.checkNotNull(dob, "dob");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
        Utils.checkNotNull(flowType, "flowType");
        Utils.checkNotNull(ipAddress, "ipAddress");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(smsMessage, "smsMessage");
        Utils.checkNotNull(ssn, "ssn");
        this.allowOTPRetry = allowOTPRetry;
        this.dob = dob;
        this.emailAddress = emailAddress;
        this.finalTargetUrl = finalTargetUrl;
        this.flowType = flowType;
        this.ipAddress = ipAddress;
        this.phoneNumber = phoneNumber;
        this.smsMessage = smsMessage;
        this.ssn = ssn;
    }
    
    public V3StartRequest(
            String flowType) {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), flowType, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * If true, the customer can re-enter the OTP up to three times. Code must also be implemented. See client-side SDK guide for more details.
     */
    @JsonIgnore
    public Optional<Boolean> allowOTPRetry() {
        return allowOTPRetry;
    }

    /**
     * The date of birth in one of these formats: YYYY-MM-DD, YYYY-MM, or MM-DD. Acceptable characters are: numeric with symbol '-'.
     */
    @JsonIgnore
    public Optional<String> dob() {
        return dob;
    }

    /**
     * The email address of the customer. Acceptable characters are: alphanumeric with symbols '@.+'.
     */
    @JsonIgnore
    public Optional<String> emailAddress() {
        return emailAddress;
    }

    /**
     * The URL where the end user will be redirected at the end of the Instant Link flow. Required only when `flowType=desktop`. Acceptable characters are: alphanumeric with symbols '-._+=/:?'. Max length is 128 characters.
     */
    @JsonIgnore
    public Optional<String> finalTargetUrl() {
        return finalTargetUrl;
    }

    /**
     * The type of device being user - either `desktop` for desktop web or `mobile` for iOS/Android native apps and mobile web.
     */
    @JsonIgnore
    public String flowType() {
        return flowType;
    }

    /**
     * The IP address of the mobile device. Acceptable characters are: numeric with symbols ':.'.
     */
    @JsonIgnore
    public Optional<String> ipAddress() {
        return ipAddress;
    }

    /**
     * The number of the mobile phone. Refer to the [Prove Pre-Fill Implementation guide](https://developer.prove.com/docs/prove-pre-fill-implementation-guide#implement-prove-pre-fill) and [Prove Identity Implementation guide](https://developer.prove.com/docs/prove-identity-implementation-guide#implement-prove-identity) for situations where this field is not required. Acceptable characters are: alphanumeric with symbols '+'.
     */
    @JsonIgnore
    public Optional<String> phoneNumber() {
        return phoneNumber;
    }

    /**
     * The message body sent in the Instant Link (`flowType=desktop`) or OTP (`flowType=mobile`) SMS message. If not provided, the following default messages will be used:
     * 
     * <p>Instant Link: "Complete your verification. If you did not make this request, do not click the link. ####" _The verification URL replaces ####._
     * 
     * <p>OTP: "#### is your temporary code to continue your application. Caution: for your security, don't share this code with anyone." _Use ####, #####, or ###### to generate 4-6 digit verification codes respectively._
     * 
     * <p>Max length is 160 characters. Non-ASCII characters are allowed.
     */
    @JsonIgnore
    public Optional<String> smsMessage() {
        return smsMessage;
    }

    /**
     * The full or last 4 digits of the social security number. Acceptable characters are: numeric.
     */
    @JsonIgnore
    public Optional<String> ssn() {
        return ssn;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * If true, the customer can re-enter the OTP up to three times. Code must also be implemented. See client-side SDK guide for more details.
     */
    public V3StartRequest withAllowOTPRetry(boolean allowOTPRetry) {
        Utils.checkNotNull(allowOTPRetry, "allowOTPRetry");
        this.allowOTPRetry = Optional.ofNullable(allowOTPRetry);
        return this;
    }


    /**
     * If true, the customer can re-enter the OTP up to three times. Code must also be implemented. See client-side SDK guide for more details.
     */
    public V3StartRequest withAllowOTPRetry(Optional<Boolean> allowOTPRetry) {
        Utils.checkNotNull(allowOTPRetry, "allowOTPRetry");
        this.allowOTPRetry = allowOTPRetry;
        return this;
    }

    /**
     * The date of birth in one of these formats: YYYY-MM-DD, YYYY-MM, or MM-DD. Acceptable characters are: numeric with symbol '-'.
     */
    public V3StartRequest withDob(String dob) {
        Utils.checkNotNull(dob, "dob");
        this.dob = Optional.ofNullable(dob);
        return this;
    }


    /**
     * The date of birth in one of these formats: YYYY-MM-DD, YYYY-MM, or MM-DD. Acceptable characters are: numeric with symbol '-'.
     */
    public V3StartRequest withDob(Optional<String> dob) {
        Utils.checkNotNull(dob, "dob");
        this.dob = dob;
        return this;
    }

    /**
     * The email address of the customer. Acceptable characters are: alphanumeric with symbols '@.+'.
     */
    public V3StartRequest withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = Optional.ofNullable(emailAddress);
        return this;
    }


    /**
     * The email address of the customer. Acceptable characters are: alphanumeric with symbols '@.+'.
     */
    public V3StartRequest withEmailAddress(Optional<String> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * The URL where the end user will be redirected at the end of the Instant Link flow. Required only when `flowType=desktop`. Acceptable characters are: alphanumeric with symbols '-._+=/:?'. Max length is 128 characters.
     */
    public V3StartRequest withFinalTargetUrl(String finalTargetUrl) {
        Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
        this.finalTargetUrl = Optional.ofNullable(finalTargetUrl);
        return this;
    }


    /**
     * The URL where the end user will be redirected at the end of the Instant Link flow. Required only when `flowType=desktop`. Acceptable characters are: alphanumeric with symbols '-._+=/:?'. Max length is 128 characters.
     */
    public V3StartRequest withFinalTargetUrl(Optional<String> finalTargetUrl) {
        Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
        this.finalTargetUrl = finalTargetUrl;
        return this;
    }

    /**
     * The type of device being user - either `desktop` for desktop web or `mobile` for iOS/Android native apps and mobile web.
     */
    public V3StartRequest withFlowType(String flowType) {
        Utils.checkNotNull(flowType, "flowType");
        this.flowType = flowType;
        return this;
    }

    /**
     * The IP address of the mobile device. Acceptable characters are: numeric with symbols ':.'.
     */
    public V3StartRequest withIpAddress(String ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = Optional.ofNullable(ipAddress);
        return this;
    }


    /**
     * The IP address of the mobile device. Acceptable characters are: numeric with symbols ':.'.
     */
    public V3StartRequest withIpAddress(Optional<String> ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * The number of the mobile phone. Refer to the [Prove Pre-Fill Implementation guide](https://developer.prove.com/docs/prove-pre-fill-implementation-guide#implement-prove-pre-fill) and [Prove Identity Implementation guide](https://developer.prove.com/docs/prove-identity-implementation-guide#implement-prove-identity) for situations where this field is not required. Acceptable characters are: alphanumeric with symbols '+'.
     */
    public V3StartRequest withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }


    /**
     * The number of the mobile phone. Refer to the [Prove Pre-Fill Implementation guide](https://developer.prove.com/docs/prove-pre-fill-implementation-guide#implement-prove-pre-fill) and [Prove Identity Implementation guide](https://developer.prove.com/docs/prove-identity-implementation-guide#implement-prove-identity) for situations where this field is not required. Acceptable characters are: alphanumeric with symbols '+'.
     */
    public V3StartRequest withPhoneNumber(Optional<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * The message body sent in the Instant Link (`flowType=desktop`) or OTP (`flowType=mobile`) SMS message. If not provided, the following default messages will be used:
     * 
     * <p>Instant Link: "Complete your verification. If you did not make this request, do not click the link. ####" _The verification URL replaces ####._
     * 
     * <p>OTP: "#### is your temporary code to continue your application. Caution: for your security, don't share this code with anyone." _Use ####, #####, or ###### to generate 4-6 digit verification codes respectively._
     * 
     * <p>Max length is 160 characters. Non-ASCII characters are allowed.
     */
    public V3StartRequest withSmsMessage(String smsMessage) {
        Utils.checkNotNull(smsMessage, "smsMessage");
        this.smsMessage = Optional.ofNullable(smsMessage);
        return this;
    }


    /**
     * The message body sent in the Instant Link (`flowType=desktop`) or OTP (`flowType=mobile`) SMS message. If not provided, the following default messages will be used:
     * 
     * <p>Instant Link: "Complete your verification. If you did not make this request, do not click the link. ####" _The verification URL replaces ####._
     * 
     * <p>OTP: "#### is your temporary code to continue your application. Caution: for your security, don't share this code with anyone." _Use ####, #####, or ###### to generate 4-6 digit verification codes respectively._
     * 
     * <p>Max length is 160 characters. Non-ASCII characters are allowed.
     */
    public V3StartRequest withSmsMessage(Optional<String> smsMessage) {
        Utils.checkNotNull(smsMessage, "smsMessage");
        this.smsMessage = smsMessage;
        return this;
    }

    /**
     * The full or last 4 digits of the social security number. Acceptable characters are: numeric.
     */
    public V3StartRequest withSsn(String ssn) {
        Utils.checkNotNull(ssn, "ssn");
        this.ssn = Optional.ofNullable(ssn);
        return this;
    }


    /**
     * The full or last 4 digits of the social security number. Acceptable characters are: numeric.
     */
    public V3StartRequest withSsn(Optional<String> ssn) {
        Utils.checkNotNull(ssn, "ssn");
        this.ssn = ssn;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3StartRequest other = (V3StartRequest) o;
        return 
            Utils.enhancedDeepEquals(this.allowOTPRetry, other.allowOTPRetry) &&
            Utils.enhancedDeepEquals(this.dob, other.dob) &&
            Utils.enhancedDeepEquals(this.emailAddress, other.emailAddress) &&
            Utils.enhancedDeepEquals(this.finalTargetUrl, other.finalTargetUrl) &&
            Utils.enhancedDeepEquals(this.flowType, other.flowType) &&
            Utils.enhancedDeepEquals(this.ipAddress, other.ipAddress) &&
            Utils.enhancedDeepEquals(this.phoneNumber, other.phoneNumber) &&
            Utils.enhancedDeepEquals(this.smsMessage, other.smsMessage) &&
            Utils.enhancedDeepEquals(this.ssn, other.ssn);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            allowOTPRetry, dob, emailAddress,
            finalTargetUrl, flowType, ipAddress,
            phoneNumber, smsMessage, ssn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3StartRequest.class,
                "allowOTPRetry", allowOTPRetry,
                "dob", dob,
                "emailAddress", emailAddress,
                "finalTargetUrl", finalTargetUrl,
                "flowType", flowType,
                "ipAddress", ipAddress,
                "phoneNumber", phoneNumber,
                "smsMessage", smsMessage,
                "ssn", ssn);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Boolean> allowOTPRetry = Optional.empty();

        private Optional<String> dob = Optional.empty();

        private Optional<String> emailAddress = Optional.empty();

        private Optional<String> finalTargetUrl = Optional.empty();

        private String flowType;

        private Optional<String> ipAddress = Optional.empty();

        private Optional<String> phoneNumber = Optional.empty();

        private Optional<String> smsMessage = Optional.empty();

        private Optional<String> ssn = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * If true, the customer can re-enter the OTP up to three times. Code must also be implemented. See client-side SDK guide for more details.
         */
        public Builder allowOTPRetry(boolean allowOTPRetry) {
            Utils.checkNotNull(allowOTPRetry, "allowOTPRetry");
            this.allowOTPRetry = Optional.ofNullable(allowOTPRetry);
            return this;
        }

        /**
         * If true, the customer can re-enter the OTP up to three times. Code must also be implemented. See client-side SDK guide for more details.
         */
        public Builder allowOTPRetry(Optional<Boolean> allowOTPRetry) {
            Utils.checkNotNull(allowOTPRetry, "allowOTPRetry");
            this.allowOTPRetry = allowOTPRetry;
            return this;
        }


        /**
         * The date of birth in one of these formats: YYYY-MM-DD, YYYY-MM, or MM-DD. Acceptable characters are: numeric with symbol '-'.
         */
        public Builder dob(String dob) {
            Utils.checkNotNull(dob, "dob");
            this.dob = Optional.ofNullable(dob);
            return this;
        }

        /**
         * The date of birth in one of these formats: YYYY-MM-DD, YYYY-MM, or MM-DD. Acceptable characters are: numeric with symbol '-'.
         */
        public Builder dob(Optional<String> dob) {
            Utils.checkNotNull(dob, "dob");
            this.dob = dob;
            return this;
        }


        /**
         * The email address of the customer. Acceptable characters are: alphanumeric with symbols '@.+'.
         */
        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = Optional.ofNullable(emailAddress);
            return this;
        }

        /**
         * The email address of the customer. Acceptable characters are: alphanumeric with symbols '@.+'.
         */
        public Builder emailAddress(Optional<String> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }


        /**
         * The URL where the end user will be redirected at the end of the Instant Link flow. Required only when `flowType=desktop`. Acceptable characters are: alphanumeric with symbols '-._+=/:?'. Max length is 128 characters.
         */
        public Builder finalTargetUrl(String finalTargetUrl) {
            Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
            this.finalTargetUrl = Optional.ofNullable(finalTargetUrl);
            return this;
        }

        /**
         * The URL where the end user will be redirected at the end of the Instant Link flow. Required only when `flowType=desktop`. Acceptable characters are: alphanumeric with symbols '-._+=/:?'. Max length is 128 characters.
         */
        public Builder finalTargetUrl(Optional<String> finalTargetUrl) {
            Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
            this.finalTargetUrl = finalTargetUrl;
            return this;
        }


        /**
         * The type of device being user - either `desktop` for desktop web or `mobile` for iOS/Android native apps and mobile web.
         */
        public Builder flowType(String flowType) {
            Utils.checkNotNull(flowType, "flowType");
            this.flowType = flowType;
            return this;
        }


        /**
         * The IP address of the mobile device. Acceptable characters are: numeric with symbols ':.'.
         */
        public Builder ipAddress(String ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = Optional.ofNullable(ipAddress);
            return this;
        }

        /**
         * The IP address of the mobile device. Acceptable characters are: numeric with symbols ':.'.
         */
        public Builder ipAddress(Optional<String> ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = ipAddress;
            return this;
        }


        /**
         * The number of the mobile phone. Refer to the [Prove Pre-Fill Implementation guide](https://developer.prove.com/docs/prove-pre-fill-implementation-guide#implement-prove-pre-fill) and [Prove Identity Implementation guide](https://developer.prove.com/docs/prove-identity-implementation-guide#implement-prove-identity) for situations where this field is not required. Acceptable characters are: alphanumeric with symbols '+'.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * The number of the mobile phone. Refer to the [Prove Pre-Fill Implementation guide](https://developer.prove.com/docs/prove-pre-fill-implementation-guide#implement-prove-pre-fill) and [Prove Identity Implementation guide](https://developer.prove.com/docs/prove-identity-implementation-guide#implement-prove-identity) for situations where this field is not required. Acceptable characters are: alphanumeric with symbols '+'.
         */
        public Builder phoneNumber(Optional<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }


        /**
         * The message body sent in the Instant Link (`flowType=desktop`) or OTP (`flowType=mobile`) SMS message. If not provided, the following default messages will be used:
         * 
         * <p>Instant Link: "Complete your verification. If you did not make this request, do not click the link. ####" _The verification URL replaces ####._
         * 
         * <p>OTP: "#### is your temporary code to continue your application. Caution: for your security, don't share this code with anyone." _Use ####, #####, or ###### to generate 4-6 digit verification codes respectively._
         * 
         * <p>Max length is 160 characters. Non-ASCII characters are allowed.
         */
        public Builder smsMessage(String smsMessage) {
            Utils.checkNotNull(smsMessage, "smsMessage");
            this.smsMessage = Optional.ofNullable(smsMessage);
            return this;
        }

        /**
         * The message body sent in the Instant Link (`flowType=desktop`) or OTP (`flowType=mobile`) SMS message. If not provided, the following default messages will be used:
         * 
         * <p>Instant Link: "Complete your verification. If you did not make this request, do not click the link. ####" _The verification URL replaces ####._
         * 
         * <p>OTP: "#### is your temporary code to continue your application. Caution: for your security, don't share this code with anyone." _Use ####, #####, or ###### to generate 4-6 digit verification codes respectively._
         * 
         * <p>Max length is 160 characters. Non-ASCII characters are allowed.
         */
        public Builder smsMessage(Optional<String> smsMessage) {
            Utils.checkNotNull(smsMessage, "smsMessage");
            this.smsMessage = smsMessage;
            return this;
        }


        /**
         * The full or last 4 digits of the social security number. Acceptable characters are: numeric.
         */
        public Builder ssn(String ssn) {
            Utils.checkNotNull(ssn, "ssn");
            this.ssn = Optional.ofNullable(ssn);
            return this;
        }

        /**
         * The full or last 4 digits of the social security number. Acceptable characters are: numeric.
         */
        public Builder ssn(Optional<String> ssn) {
            Utils.checkNotNull(ssn, "ssn");
            this.ssn = ssn;
            return this;
        }

        public V3StartRequest build() {

            return new V3StartRequest(
                allowOTPRetry, dob, emailAddress,
                finalTargetUrl, flowType, ipAddress,
                phoneNumber, smsMessage, ssn);
        }

    }
}
