/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Optional;


public class V3ValidateResponse {
    /**
     * True if a DOB or SSN needs to be passed in on the next step.
     */
    @JsonProperty("challengeMissing")
    private boolean challengeMissing;

    /**
     * The evaluation result for the policy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("evaluation")
    private Optional<? extends Map<String, V3ValidateResponseEvaluation>> evaluation;

    /**
     * The next set of allowed calls in the same flow.
     */
    @JsonProperty("next")
    private Map<String, String> next;

    /**
     * The number of the mobile phone for which validation was performed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumber")
    private Optional<String> phoneNumber;

    /**
     * True if the phone number was validated.
     */
    @JsonProperty("success")
    private boolean success;

    @JsonCreator
    public V3ValidateResponse(
            @JsonProperty("challengeMissing") boolean challengeMissing,
            @JsonProperty("evaluation") Optional<? extends Map<String, V3ValidateResponseEvaluation>> evaluation,
            @JsonProperty("next") Map<String, String> next,
            @JsonProperty("phoneNumber") Optional<String> phoneNumber,
            @JsonProperty("success") boolean success) {
        Utils.checkNotNull(challengeMissing, "challengeMissing");
        Utils.checkNotNull(evaluation, "evaluation");
        next = Utils.emptyMapIfNull(next);
        Utils.checkNotNull(next, "next");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(success, "success");
        this.challengeMissing = challengeMissing;
        this.evaluation = evaluation;
        this.next = next;
        this.phoneNumber = phoneNumber;
        this.success = success;
    }
    
    public V3ValidateResponse(
            boolean challengeMissing,
            Map<String, String> next,
            boolean success) {
        this(challengeMissing, Optional.empty(), next,
            Optional.empty(), success);
    }

    /**
     * True if a DOB or SSN needs to be passed in on the next step.
     */
    @JsonIgnore
    public boolean challengeMissing() {
        return challengeMissing;
    }

    /**
     * The evaluation result for the policy
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, V3ValidateResponseEvaluation>> evaluation() {
        return (Optional<Map<String, V3ValidateResponseEvaluation>>) evaluation;
    }

    /**
     * The next set of allowed calls in the same flow.
     */
    @JsonIgnore
    public Map<String, String> next() {
        return next;
    }

    /**
     * The number of the mobile phone for which validation was performed.
     */
    @JsonIgnore
    public Optional<String> phoneNumber() {
        return phoneNumber;
    }

    /**
     * True if the phone number was validated.
     */
    @JsonIgnore
    public boolean success() {
        return success;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * True if a DOB or SSN needs to be passed in on the next step.
     */
    public V3ValidateResponse withChallengeMissing(boolean challengeMissing) {
        Utils.checkNotNull(challengeMissing, "challengeMissing");
        this.challengeMissing = challengeMissing;
        return this;
    }

    /**
     * The evaluation result for the policy
     */
    public V3ValidateResponse withEvaluation(Map<String, V3ValidateResponseEvaluation> evaluation) {
        Utils.checkNotNull(evaluation, "evaluation");
        this.evaluation = Optional.ofNullable(evaluation);
        return this;
    }


    /**
     * The evaluation result for the policy
     */
    public V3ValidateResponse withEvaluation(Optional<? extends Map<String, V3ValidateResponseEvaluation>> evaluation) {
        Utils.checkNotNull(evaluation, "evaluation");
        this.evaluation = evaluation;
        return this;
    }

    /**
     * The next set of allowed calls in the same flow.
     */
    public V3ValidateResponse withNext(Map<String, String> next) {
        Utils.checkNotNull(next, "next");
        this.next = next;
        return this;
    }

    /**
     * The number of the mobile phone for which validation was performed.
     */
    public V3ValidateResponse withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }


    /**
     * The number of the mobile phone for which validation was performed.
     */
    public V3ValidateResponse withPhoneNumber(Optional<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * True if the phone number was validated.
     */
    public V3ValidateResponse withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3ValidateResponse other = (V3ValidateResponse) o;
        return 
            Utils.enhancedDeepEquals(this.challengeMissing, other.challengeMissing) &&
            Utils.enhancedDeepEquals(this.evaluation, other.evaluation) &&
            Utils.enhancedDeepEquals(this.next, other.next) &&
            Utils.enhancedDeepEquals(this.phoneNumber, other.phoneNumber) &&
            Utils.enhancedDeepEquals(this.success, other.success);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            challengeMissing, evaluation, next,
            phoneNumber, success);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3ValidateResponse.class,
                "challengeMissing", challengeMissing,
                "evaluation", evaluation,
                "next", next,
                "phoneNumber", phoneNumber,
                "success", success);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Boolean challengeMissing;

        private Optional<? extends Map<String, V3ValidateResponseEvaluation>> evaluation = Optional.empty();

        private Map<String, String> next;

        private Optional<String> phoneNumber = Optional.empty();

        private Boolean success;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * True if a DOB or SSN needs to be passed in on the next step.
         */
        public Builder challengeMissing(boolean challengeMissing) {
            Utils.checkNotNull(challengeMissing, "challengeMissing");
            this.challengeMissing = challengeMissing;
            return this;
        }


        /**
         * The evaluation result for the policy
         */
        public Builder evaluation(Map<String, V3ValidateResponseEvaluation> evaluation) {
            Utils.checkNotNull(evaluation, "evaluation");
            this.evaluation = Optional.ofNullable(evaluation);
            return this;
        }

        /**
         * The evaluation result for the policy
         */
        public Builder evaluation(Optional<? extends Map<String, V3ValidateResponseEvaluation>> evaluation) {
            Utils.checkNotNull(evaluation, "evaluation");
            this.evaluation = evaluation;
            return this;
        }


        /**
         * The next set of allowed calls in the same flow.
         */
        public Builder next(Map<String, String> next) {
            Utils.checkNotNull(next, "next");
            this.next = next;
            return this;
        }


        /**
         * The number of the mobile phone for which validation was performed.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * The number of the mobile phone for which validation was performed.
         */
        public Builder phoneNumber(Optional<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }


        /**
         * True if the phone number was validated.
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }

        public V3ValidateResponse build() {

            return new V3ValidateResponse(
                challengeMissing, evaluation, next,
                phoneNumber, success);
        }

    }
}
