/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * LookupIdentityItem
 * 
 * <p>An Identity associated with the given phone number.
 */
public class LookupIdentityItem {

    /**
     * If true, the identity is currently active.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<Boolean> active;

    /**
     * The carrier associated with this identity/mobile number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrier")
    private Optional<String> carrier;

    /**
     * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientCustomerId")
    private Optional<String> clientCustomerId;

    /**
     * The country code associated with the customer/identity. This will be in the ISO 3166-1 A-2 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countryCode")
    private Optional<String> countryCode;

    /**
     * The time that this identity was created, in seconds since the Unix epoch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<Long> createdAt;

    /**
     * The time that this identity was created, in ISO 8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationString")
    private Optional<String> creationString;

    /**
     * A string that is the unique identifier for the Prove Key on the device. Only applicable if you are leveraging Prove Unify.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceId")
    private Optional<String> deviceId;

    /**
     * A Prove-generated unique ID for a specific identity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identityId")
    private Optional<String> identityId;

    /**
     * The type of line associated with this identity/mobile number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineType")
    private Optional<String> lineType;

    /**
     * The number of the mobile phone. Refer to the Prove Pre-Fill with Mobile Auth and Prove Identity with Mobile Auth documentation for situations where this field is not required. US phone numbers can be passed in with or without a leading +1. Acceptable characters are: alphanumeric with symbols '+'.
     */
    @JsonProperty("phoneNumber")
    private String phoneNumber;

    @JsonCreator
    public LookupIdentityItem(
            @JsonProperty("active") Optional<Boolean> active,
            @JsonProperty("carrier") Optional<String> carrier,
            @JsonProperty("clientCustomerId") Optional<String> clientCustomerId,
            @JsonProperty("countryCode") Optional<String> countryCode,
            @JsonProperty("createdAt") Optional<Long> createdAt,
            @JsonProperty("creationString") Optional<String> creationString,
            @JsonProperty("deviceId") Optional<String> deviceId,
            @JsonProperty("identityId") Optional<String> identityId,
            @JsonProperty("lineType") Optional<String> lineType,
            @JsonProperty("phoneNumber") String phoneNumber) {
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(carrier, "carrier");
        Utils.checkNotNull(clientCustomerId, "clientCustomerId");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(creationString, "creationString");
        Utils.checkNotNull(deviceId, "deviceId");
        Utils.checkNotNull(identityId, "identityId");
        Utils.checkNotNull(lineType, "lineType");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.active = active;
        this.carrier = carrier;
        this.clientCustomerId = clientCustomerId;
        this.countryCode = countryCode;
        this.createdAt = createdAt;
        this.creationString = creationString;
        this.deviceId = deviceId;
        this.identityId = identityId;
        this.lineType = lineType;
        this.phoneNumber = phoneNumber;
    }
    
    public LookupIdentityItem(
            String phoneNumber) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), phoneNumber);
    }

    /**
     * If true, the identity is currently active.
     */
    @JsonIgnore
    public Optional<Boolean> active() {
        return active;
    }

    /**
     * The carrier associated with this identity/mobile number.
     */
    @JsonIgnore
    public Optional<String> carrier() {
        return carrier;
    }

    /**
     * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted.
     */
    @JsonIgnore
    public Optional<String> clientCustomerId() {
        return clientCustomerId;
    }

    /**
     * The country code associated with the customer/identity. This will be in the ISO 3166-1 A-2 format.
     */
    @JsonIgnore
    public Optional<String> countryCode() {
        return countryCode;
    }

    /**
     * The time that this identity was created, in seconds since the Unix epoch.
     */
    @JsonIgnore
    public Optional<Long> createdAt() {
        return createdAt;
    }

    /**
     * The time that this identity was created, in ISO 8601 format.
     */
    @JsonIgnore
    public Optional<String> creationString() {
        return creationString;
    }

    /**
     * A string that is the unique identifier for the Prove Key on the device. Only applicable if you are leveraging Prove Unify.
     */
    @JsonIgnore
    public Optional<String> deviceId() {
        return deviceId;
    }

    /**
     * A Prove-generated unique ID for a specific identity.
     */
    @JsonIgnore
    public Optional<String> identityId() {
        return identityId;
    }

    /**
     * The type of line associated with this identity/mobile number.
     */
    @JsonIgnore
    public Optional<String> lineType() {
        return lineType;
    }

    /**
     * The number of the mobile phone. Refer to the Prove Pre-Fill with Mobile Auth and Prove Identity with Mobile Auth documentation for situations where this field is not required. US phone numbers can be passed in with or without a leading +1. Acceptable characters are: alphanumeric with symbols '+'.
     */
    @JsonIgnore
    public String phoneNumber() {
        return phoneNumber;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * If true, the identity is currently active.
     */
    public LookupIdentityItem withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    /**
     * If true, the identity is currently active.
     */
    public LookupIdentityItem withActive(Optional<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * The carrier associated with this identity/mobile number.
     */
    public LookupIdentityItem withCarrier(String carrier) {
        Utils.checkNotNull(carrier, "carrier");
        this.carrier = Optional.ofNullable(carrier);
        return this;
    }

    /**
     * The carrier associated with this identity/mobile number.
     */
    public LookupIdentityItem withCarrier(Optional<String> carrier) {
        Utils.checkNotNull(carrier, "carrier");
        this.carrier = carrier;
        return this;
    }

    /**
     * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted.
     */
    public LookupIdentityItem withClientCustomerId(String clientCustomerId) {
        Utils.checkNotNull(clientCustomerId, "clientCustomerId");
        this.clientCustomerId = Optional.ofNullable(clientCustomerId);
        return this;
    }

    /**
     * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted.
     */
    public LookupIdentityItem withClientCustomerId(Optional<String> clientCustomerId) {
        Utils.checkNotNull(clientCustomerId, "clientCustomerId");
        this.clientCustomerId = clientCustomerId;
        return this;
    }

    /**
     * The country code associated with the customer/identity. This will be in the ISO 3166-1 A-2 format.
     */
    public LookupIdentityItem withCountryCode(String countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = Optional.ofNullable(countryCode);
        return this;
    }

    /**
     * The country code associated with the customer/identity. This will be in the ISO 3166-1 A-2 format.
     */
    public LookupIdentityItem withCountryCode(Optional<String> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    /**
     * The time that this identity was created, in seconds since the Unix epoch.
     */
    public LookupIdentityItem withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * The time that this identity was created, in seconds since the Unix epoch.
     */
    public LookupIdentityItem withCreatedAt(Optional<Long> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The time that this identity was created, in ISO 8601 format.
     */
    public LookupIdentityItem withCreationString(String creationString) {
        Utils.checkNotNull(creationString, "creationString");
        this.creationString = Optional.ofNullable(creationString);
        return this;
    }

    /**
     * The time that this identity was created, in ISO 8601 format.
     */
    public LookupIdentityItem withCreationString(Optional<String> creationString) {
        Utils.checkNotNull(creationString, "creationString");
        this.creationString = creationString;
        return this;
    }

    /**
     * A string that is the unique identifier for the Prove Key on the device. Only applicable if you are leveraging Prove Unify.
     */
    public LookupIdentityItem withDeviceId(String deviceId) {
        Utils.checkNotNull(deviceId, "deviceId");
        this.deviceId = Optional.ofNullable(deviceId);
        return this;
    }

    /**
     * A string that is the unique identifier for the Prove Key on the device. Only applicable if you are leveraging Prove Unify.
     */
    public LookupIdentityItem withDeviceId(Optional<String> deviceId) {
        Utils.checkNotNull(deviceId, "deviceId");
        this.deviceId = deviceId;
        return this;
    }

    /**
     * A Prove-generated unique ID for a specific identity.
     */
    public LookupIdentityItem withIdentityId(String identityId) {
        Utils.checkNotNull(identityId, "identityId");
        this.identityId = Optional.ofNullable(identityId);
        return this;
    }

    /**
     * A Prove-generated unique ID for a specific identity.
     */
    public LookupIdentityItem withIdentityId(Optional<String> identityId) {
        Utils.checkNotNull(identityId, "identityId");
        this.identityId = identityId;
        return this;
    }

    /**
     * The type of line associated with this identity/mobile number.
     */
    public LookupIdentityItem withLineType(String lineType) {
        Utils.checkNotNull(lineType, "lineType");
        this.lineType = Optional.ofNullable(lineType);
        return this;
    }

    /**
     * The type of line associated with this identity/mobile number.
     */
    public LookupIdentityItem withLineType(Optional<String> lineType) {
        Utils.checkNotNull(lineType, "lineType");
        this.lineType = lineType;
        return this;
    }

    /**
     * The number of the mobile phone. Refer to the Prove Pre-Fill with Mobile Auth and Prove Identity with Mobile Auth documentation for situations where this field is not required. US phone numbers can be passed in with or without a leading +1. Acceptable characters are: alphanumeric with symbols '+'.
     */
    public LookupIdentityItem withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LookupIdentityItem other = (LookupIdentityItem) o;
        return 
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.carrier, other.carrier) &&
            Objects.deepEquals(this.clientCustomerId, other.clientCustomerId) &&
            Objects.deepEquals(this.countryCode, other.countryCode) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.creationString, other.creationString) &&
            Objects.deepEquals(this.deviceId, other.deviceId) &&
            Objects.deepEquals(this.identityId, other.identityId) &&
            Objects.deepEquals(this.lineType, other.lineType) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            active,
            carrier,
            clientCustomerId,
            countryCode,
            createdAt,
            creationString,
            deviceId,
            identityId,
            lineType,
            phoneNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LookupIdentityItem.class,
                "active", active,
                "carrier", carrier,
                "clientCustomerId", clientCustomerId,
                "countryCode", countryCode,
                "createdAt", createdAt,
                "creationString", creationString,
                "deviceId", deviceId,
                "identityId", identityId,
                "lineType", lineType,
                "phoneNumber", phoneNumber);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> active = Optional.empty();
 
        private Optional<String> carrier = Optional.empty();
 
        private Optional<String> clientCustomerId = Optional.empty();
 
        private Optional<String> countryCode = Optional.empty();
 
        private Optional<Long> createdAt = Optional.empty();
 
        private Optional<String> creationString = Optional.empty();
 
        private Optional<String> deviceId = Optional.empty();
 
        private Optional<String> identityId = Optional.empty();
 
        private Optional<String> lineType = Optional.empty();
 
        private String phoneNumber;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * If true, the identity is currently active.
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * If true, the identity is currently active.
         */
        public Builder active(Optional<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * The carrier associated with this identity/mobile number.
         */
        public Builder carrier(String carrier) {
            Utils.checkNotNull(carrier, "carrier");
            this.carrier = Optional.ofNullable(carrier);
            return this;
        }

        /**
         * The carrier associated with this identity/mobile number.
         */
        public Builder carrier(Optional<String> carrier) {
            Utils.checkNotNull(carrier, "carrier");
            this.carrier = carrier;
            return this;
        }

        /**
         * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted.
         */
        public Builder clientCustomerId(String clientCustomerId) {
            Utils.checkNotNull(clientCustomerId, "clientCustomerId");
            this.clientCustomerId = Optional.ofNullable(clientCustomerId);
            return this;
        }

        /**
         * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted.
         */
        public Builder clientCustomerId(Optional<String> clientCustomerId) {
            Utils.checkNotNull(clientCustomerId, "clientCustomerId");
            this.clientCustomerId = clientCustomerId;
            return this;
        }

        /**
         * The country code associated with the customer/identity. This will be in the ISO 3166-1 A-2 format.
         */
        public Builder countryCode(String countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = Optional.ofNullable(countryCode);
            return this;
        }

        /**
         * The country code associated with the customer/identity. This will be in the ISO 3166-1 A-2 format.
         */
        public Builder countryCode(Optional<String> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }

        /**
         * The time that this identity was created, in seconds since the Unix epoch.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The time that this identity was created, in seconds since the Unix epoch.
         */
        public Builder createdAt(Optional<Long> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The time that this identity was created, in ISO 8601 format.
         */
        public Builder creationString(String creationString) {
            Utils.checkNotNull(creationString, "creationString");
            this.creationString = Optional.ofNullable(creationString);
            return this;
        }

        /**
         * The time that this identity was created, in ISO 8601 format.
         */
        public Builder creationString(Optional<String> creationString) {
            Utils.checkNotNull(creationString, "creationString");
            this.creationString = creationString;
            return this;
        }

        /**
         * A string that is the unique identifier for the Prove Key on the device. Only applicable if you are leveraging Prove Unify.
         */
        public Builder deviceId(String deviceId) {
            Utils.checkNotNull(deviceId, "deviceId");
            this.deviceId = Optional.ofNullable(deviceId);
            return this;
        }

        /**
         * A string that is the unique identifier for the Prove Key on the device. Only applicable if you are leveraging Prove Unify.
         */
        public Builder deviceId(Optional<String> deviceId) {
            Utils.checkNotNull(deviceId, "deviceId");
            this.deviceId = deviceId;
            return this;
        }

        /**
         * A Prove-generated unique ID for a specific identity.
         */
        public Builder identityId(String identityId) {
            Utils.checkNotNull(identityId, "identityId");
            this.identityId = Optional.ofNullable(identityId);
            return this;
        }

        /**
         * A Prove-generated unique ID for a specific identity.
         */
        public Builder identityId(Optional<String> identityId) {
            Utils.checkNotNull(identityId, "identityId");
            this.identityId = identityId;
            return this;
        }

        /**
         * The type of line associated with this identity/mobile number.
         */
        public Builder lineType(String lineType) {
            Utils.checkNotNull(lineType, "lineType");
            this.lineType = Optional.ofNullable(lineType);
            return this;
        }

        /**
         * The type of line associated with this identity/mobile number.
         */
        public Builder lineType(Optional<String> lineType) {
            Utils.checkNotNull(lineType, "lineType");
            this.lineType = lineType;
            return this;
        }

        /**
         * The number of the mobile phone. Refer to the Prove Pre-Fill with Mobile Auth and Prove Identity with Mobile Auth documentation for situations where this field is not required. US phone numbers can be passed in with or without a leading +1. Acceptable characters are: alphanumeric with symbols '+'.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        public LookupIdentityItem build() {
            return new LookupIdentityItem(
                active,
                carrier,
                clientCustomerId,
                countryCode,
                createdAt,
                creationString,
                deviceId,
                identityId,
                lineType,
                phoneNumber);
        }
    }
}
