/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class V3DomainLinkRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pcid")
    private Optional<String> pcid;

    @JsonCreator
    public V3DomainLinkRequest(
            @JsonProperty("pcid") Optional<String> pcid) {
        Utils.checkNotNull(pcid, "pcid");
        this.pcid = pcid;
    }
    
    public V3DomainLinkRequest() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<String> pcid() {
        return pcid;
    }

    public static Builder builder() {
        return new Builder();
    }


    public V3DomainLinkRequest withPcid(String pcid) {
        Utils.checkNotNull(pcid, "pcid");
        this.pcid = Optional.ofNullable(pcid);
        return this;
    }


    public V3DomainLinkRequest withPcid(Optional<String> pcid) {
        Utils.checkNotNull(pcid, "pcid");
        this.pcid = pcid;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3DomainLinkRequest other = (V3DomainLinkRequest) o;
        return 
            Utils.enhancedDeepEquals(this.pcid, other.pcid);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            pcid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3DomainLinkRequest.class,
                "pcid", pcid);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> pcid = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder pcid(String pcid) {
            Utils.checkNotNull(pcid, "pcid");
            this.pcid = Optional.ofNullable(pcid);
            return this;
        }

        public Builder pcid(Optional<String> pcid) {
            Utils.checkNotNull(pcid, "pcid");
            this.pcid = pcid;
            return this;
        }

        public V3DomainLinkRequest build() {

            return new V3DomainLinkRequest(
                pcid);
        }

    }
}
