/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.prove.proveapi.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
/**
 * V3MFABindRequest - Request body for the V3 MFA Bind API
 */

public class V3MFABindRequest {

    /**
     * Client Request ID is a client-generated unique ID for a specific request.
     * This can be used by clients to identify specific requests made to Prove Link.
     * The format of this ID is defined by the client - Prove recommends using a GUID,
     * but any format can be accepted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientRequestId")
    private Optional<String> clientRequestId;

    /**
     * Correlation ID is the unique ID that Prove generates for the flow. It is returned
     * from the v3/mfa endpoint and cannot be reused outside of a single flow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("correlationId")
    private Optional<String> correlationId;

    /**
     * Phone number is only allowed when possessionType=none from the initial MFA request.
     * Required for BYO Possession flow on the third call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumber")
    private Optional<String> phoneNumber;

    @JsonCreator
    public V3MFABindRequest(
            @JsonProperty("clientRequestId") Optional<String> clientRequestId,
            @JsonProperty("correlationId") Optional<String> correlationId,
            @JsonProperty("phoneNumber") Optional<String> phoneNumber) {
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        Utils.checkNotNull(correlationId, "correlationId");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.clientRequestId = clientRequestId;
        this.correlationId = correlationId;
        this.phoneNumber = phoneNumber;
    }
    
    public V3MFABindRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Client Request ID is a client-generated unique ID for a specific request.
     * This can be used by clients to identify specific requests made to Prove Link.
     * The format of this ID is defined by the client - Prove recommends using a GUID,
     * but any format can be accepted.
     */
    @JsonIgnore
    public Optional<String> clientRequestId() {
        return clientRequestId;
    }

    /**
     * Correlation ID is the unique ID that Prove generates for the flow. It is returned
     * from the v3/mfa endpoint and cannot be reused outside of a single flow.
     */
    @JsonIgnore
    public Optional<String> correlationId() {
        return correlationId;
    }

    /**
     * Phone number is only allowed when possessionType=none from the initial MFA request.
     * Required for BYO Possession flow on the third call.
     */
    @JsonIgnore
    public Optional<String> phoneNumber() {
        return phoneNumber;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Client Request ID is a client-generated unique ID for a specific request.
     * This can be used by clients to identify specific requests made to Prove Link.
     * The format of this ID is defined by the client - Prove recommends using a GUID,
     * but any format can be accepted.
     */
    public V3MFABindRequest withClientRequestId(String clientRequestId) {
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        this.clientRequestId = Optional.ofNullable(clientRequestId);
        return this;
    }

    /**
     * Client Request ID is a client-generated unique ID for a specific request.
     * This can be used by clients to identify specific requests made to Prove Link.
     * The format of this ID is defined by the client - Prove recommends using a GUID,
     * but any format can be accepted.
     */
    public V3MFABindRequest withClientRequestId(Optional<String> clientRequestId) {
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        this.clientRequestId = clientRequestId;
        return this;
    }

    /**
     * Correlation ID is the unique ID that Prove generates for the flow. It is returned
     * from the v3/mfa endpoint and cannot be reused outside of a single flow.
     */
    public V3MFABindRequest withCorrelationId(String correlationId) {
        Utils.checkNotNull(correlationId, "correlationId");
        this.correlationId = Optional.ofNullable(correlationId);
        return this;
    }

    /**
     * Correlation ID is the unique ID that Prove generates for the flow. It is returned
     * from the v3/mfa endpoint and cannot be reused outside of a single flow.
     */
    public V3MFABindRequest withCorrelationId(Optional<String> correlationId) {
        Utils.checkNotNull(correlationId, "correlationId");
        this.correlationId = correlationId;
        return this;
    }

    /**
     * Phone number is only allowed when possessionType=none from the initial MFA request.
     * Required for BYO Possession flow on the third call.
     */
    public V3MFABindRequest withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }

    /**
     * Phone number is only allowed when possessionType=none from the initial MFA request.
     * Required for BYO Possession flow on the third call.
     */
    public V3MFABindRequest withPhoneNumber(Optional<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3MFABindRequest other = (V3MFABindRequest) o;
        return 
            Objects.deepEquals(this.clientRequestId, other.clientRequestId) &&
            Objects.deepEquals(this.correlationId, other.correlationId) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientRequestId,
            correlationId,
            phoneNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3MFABindRequest.class,
                "clientRequestId", clientRequestId,
                "correlationId", correlationId,
                "phoneNumber", phoneNumber);
    }
    
    public final static class Builder {
 
        private Optional<String> clientRequestId = Optional.empty();
 
        private Optional<String> correlationId = Optional.empty();
 
        private Optional<String> phoneNumber = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Client Request ID is a client-generated unique ID for a specific request.
         * This can be used by clients to identify specific requests made to Prove Link.
         * The format of this ID is defined by the client - Prove recommends using a GUID,
         * but any format can be accepted.
         */
        public Builder clientRequestId(String clientRequestId) {
            Utils.checkNotNull(clientRequestId, "clientRequestId");
            this.clientRequestId = Optional.ofNullable(clientRequestId);
            return this;
        }

        /**
         * Client Request ID is a client-generated unique ID for a specific request.
         * This can be used by clients to identify specific requests made to Prove Link.
         * The format of this ID is defined by the client - Prove recommends using a GUID,
         * but any format can be accepted.
         */
        public Builder clientRequestId(Optional<String> clientRequestId) {
            Utils.checkNotNull(clientRequestId, "clientRequestId");
            this.clientRequestId = clientRequestId;
            return this;
        }

        /**
         * Correlation ID is the unique ID that Prove generates for the flow. It is returned
         * from the v3/mfa endpoint and cannot be reused outside of a single flow.
         */
        public Builder correlationId(String correlationId) {
            Utils.checkNotNull(correlationId, "correlationId");
            this.correlationId = Optional.ofNullable(correlationId);
            return this;
        }

        /**
         * Correlation ID is the unique ID that Prove generates for the flow. It is returned
         * from the v3/mfa endpoint and cannot be reused outside of a single flow.
         */
        public Builder correlationId(Optional<String> correlationId) {
            Utils.checkNotNull(correlationId, "correlationId");
            this.correlationId = correlationId;
            return this;
        }

        /**
         * Phone number is only allowed when possessionType=none from the initial MFA request.
         * Required for BYO Possession flow on the third call.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * Phone number is only allowed when possessionType=none from the initial MFA request.
         * Required for BYO Possession flow on the third call.
         */
        public Builder phoneNumber(Optional<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        public V3MFABindRequest build() {
            return new V3MFABindRequest(
                clientRequestId,
                correlationId,
                phoneNumber);
        }
    }
}

