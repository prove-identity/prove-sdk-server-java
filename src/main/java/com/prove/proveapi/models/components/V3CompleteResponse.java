/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class V3CompleteResponse {
    /**
     * The evaluation result for the policy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("evaluation")
    private JsonNullable<? extends Map<String, V3CompleteResponseEvaluation>> evaluation;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idv")
    private Optional<? extends IDVDataInternal> idv;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kyc")
    private Optional<? extends KYCInternal> kyc;

    /**
     * The next set of allowed calls in the same flow.
     */
    @JsonProperty("next")
    private Map<String, String> next;

    /**
     * True if the individual was verified successfully.
     */
    @JsonProperty("success")
    private boolean success;

    @JsonCreator
    public V3CompleteResponse(
            @JsonProperty("evaluation") JsonNullable<? extends Map<String, V3CompleteResponseEvaluation>> evaluation,
            @JsonProperty("idv") Optional<? extends IDVDataInternal> idv,
            @JsonProperty("kyc") Optional<? extends KYCInternal> kyc,
            @JsonProperty("next") Map<String, String> next,
            @JsonProperty("success") boolean success) {
        Utils.checkNotNull(evaluation, "evaluation");
        Utils.checkNotNull(idv, "idv");
        Utils.checkNotNull(kyc, "kyc");
        next = Utils.emptyMapIfNull(next);
        Utils.checkNotNull(next, "next");
        Utils.checkNotNull(success, "success");
        this.evaluation = evaluation;
        this.idv = idv;
        this.kyc = kyc;
        this.next = next;
        this.success = success;
    }
    
    public V3CompleteResponse(
            Map<String, String> next,
            boolean success) {
        this(JsonNullable.undefined(), Optional.empty(), Optional.empty(),
            next, success);
    }

    /**
     * The evaluation result for the policy
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, V3CompleteResponseEvaluation>> evaluation() {
        return (JsonNullable<Map<String, V3CompleteResponseEvaluation>>) evaluation;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<IDVDataInternal> idv() {
        return (Optional<IDVDataInternal>) idv;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<KYCInternal> kyc() {
        return (Optional<KYCInternal>) kyc;
    }

    /**
     * The next set of allowed calls in the same flow.
     */
    @JsonIgnore
    public Map<String, String> next() {
        return next;
    }

    /**
     * True if the individual was verified successfully.
     */
    @JsonIgnore
    public boolean success() {
        return success;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The evaluation result for the policy
     */
    public V3CompleteResponse withEvaluation(Map<String, V3CompleteResponseEvaluation> evaluation) {
        Utils.checkNotNull(evaluation, "evaluation");
        this.evaluation = JsonNullable.of(evaluation);
        return this;
    }

    /**
     * The evaluation result for the policy
     */
    public V3CompleteResponse withEvaluation(JsonNullable<? extends Map<String, V3CompleteResponseEvaluation>> evaluation) {
        Utils.checkNotNull(evaluation, "evaluation");
        this.evaluation = evaluation;
        return this;
    }

    public V3CompleteResponse withIdv(IDVDataInternal idv) {
        Utils.checkNotNull(idv, "idv");
        this.idv = Optional.ofNullable(idv);
        return this;
    }


    public V3CompleteResponse withIdv(Optional<? extends IDVDataInternal> idv) {
        Utils.checkNotNull(idv, "idv");
        this.idv = idv;
        return this;
    }

    public V3CompleteResponse withKyc(KYCInternal kyc) {
        Utils.checkNotNull(kyc, "kyc");
        this.kyc = Optional.ofNullable(kyc);
        return this;
    }


    public V3CompleteResponse withKyc(Optional<? extends KYCInternal> kyc) {
        Utils.checkNotNull(kyc, "kyc");
        this.kyc = kyc;
        return this;
    }

    /**
     * The next set of allowed calls in the same flow.
     */
    public V3CompleteResponse withNext(Map<String, String> next) {
        Utils.checkNotNull(next, "next");
        this.next = next;
        return this;
    }

    /**
     * True if the individual was verified successfully.
     */
    public V3CompleteResponse withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3CompleteResponse other = (V3CompleteResponse) o;
        return 
            Utils.enhancedDeepEquals(this.evaluation, other.evaluation) &&
            Utils.enhancedDeepEquals(this.idv, other.idv) &&
            Utils.enhancedDeepEquals(this.kyc, other.kyc) &&
            Utils.enhancedDeepEquals(this.next, other.next) &&
            Utils.enhancedDeepEquals(this.success, other.success);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            evaluation, idv, kyc,
            next, success);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3CompleteResponse.class,
                "evaluation", evaluation,
                "idv", idv,
                "kyc", kyc,
                "next", next,
                "success", success);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends Map<String, V3CompleteResponseEvaluation>> evaluation = JsonNullable.undefined();

        private Optional<? extends IDVDataInternal> idv = Optional.empty();

        private Optional<? extends KYCInternal> kyc = Optional.empty();

        private Map<String, String> next;

        private Boolean success;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The evaluation result for the policy
         */
        public Builder evaluation(Map<String, V3CompleteResponseEvaluation> evaluation) {
            Utils.checkNotNull(evaluation, "evaluation");
            this.evaluation = JsonNullable.of(evaluation);
            return this;
        }

        /**
         * The evaluation result for the policy
         */
        public Builder evaluation(JsonNullable<? extends Map<String, V3CompleteResponseEvaluation>> evaluation) {
            Utils.checkNotNull(evaluation, "evaluation");
            this.evaluation = evaluation;
            return this;
        }


        public Builder idv(IDVDataInternal idv) {
            Utils.checkNotNull(idv, "idv");
            this.idv = Optional.ofNullable(idv);
            return this;
        }

        public Builder idv(Optional<? extends IDVDataInternal> idv) {
            Utils.checkNotNull(idv, "idv");
            this.idv = idv;
            return this;
        }


        public Builder kyc(KYCInternal kyc) {
            Utils.checkNotNull(kyc, "kyc");
            this.kyc = Optional.ofNullable(kyc);
            return this;
        }

        public Builder kyc(Optional<? extends KYCInternal> kyc) {
            Utils.checkNotNull(kyc, "kyc");
            this.kyc = kyc;
            return this;
        }


        /**
         * The next set of allowed calls in the same flow.
         */
        public Builder next(Map<String, String> next) {
            Utils.checkNotNull(next, "next");
            this.next = next;
            return this;
        }


        /**
         * True if the individual was verified successfully.
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }

        public V3CompleteResponse build() {

            return new V3CompleteResponse(
                evaluation, idv, kyc,
                next, success);
        }

    }
}
