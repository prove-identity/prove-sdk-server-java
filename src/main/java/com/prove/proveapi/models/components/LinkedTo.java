/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class LinkedTo {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptedAt")
    private Optional<Long> acceptedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptedString")
    private Optional<String> acceptedString;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pcid")
    private Optional<String> pcid;

    @JsonCreator
    public LinkedTo(
            @JsonProperty("acceptedAt") Optional<Long> acceptedAt,
            @JsonProperty("acceptedString") Optional<String> acceptedString,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("pcid") Optional<String> pcid) {
        Utils.checkNotNull(acceptedAt, "acceptedAt");
        Utils.checkNotNull(acceptedString, "acceptedString");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(pcid, "pcid");
        this.acceptedAt = acceptedAt;
        this.acceptedString = acceptedString;
        this.name = name;
        this.pcid = pcid;
    }
    
    public LinkedTo() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @JsonIgnore
    public Optional<Long> acceptedAt() {
        return acceptedAt;
    }

    @JsonIgnore
    public Optional<String> acceptedString() {
        return acceptedString;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> pcid() {
        return pcid;
    }

    public static Builder builder() {
        return new Builder();
    }


    public LinkedTo withAcceptedAt(long acceptedAt) {
        Utils.checkNotNull(acceptedAt, "acceptedAt");
        this.acceptedAt = Optional.ofNullable(acceptedAt);
        return this;
    }


    public LinkedTo withAcceptedAt(Optional<Long> acceptedAt) {
        Utils.checkNotNull(acceptedAt, "acceptedAt");
        this.acceptedAt = acceptedAt;
        return this;
    }

    public LinkedTo withAcceptedString(String acceptedString) {
        Utils.checkNotNull(acceptedString, "acceptedString");
        this.acceptedString = Optional.ofNullable(acceptedString);
        return this;
    }


    public LinkedTo withAcceptedString(Optional<String> acceptedString) {
        Utils.checkNotNull(acceptedString, "acceptedString");
        this.acceptedString = acceptedString;
        return this;
    }

    public LinkedTo withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public LinkedTo withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public LinkedTo withPcid(String pcid) {
        Utils.checkNotNull(pcid, "pcid");
        this.pcid = Optional.ofNullable(pcid);
        return this;
    }


    public LinkedTo withPcid(Optional<String> pcid) {
        Utils.checkNotNull(pcid, "pcid");
        this.pcid = pcid;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LinkedTo other = (LinkedTo) o;
        return 
            Utils.enhancedDeepEquals(this.acceptedAt, other.acceptedAt) &&
            Utils.enhancedDeepEquals(this.acceptedString, other.acceptedString) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.pcid, other.pcid);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            acceptedAt, acceptedString, name,
            pcid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LinkedTo.class,
                "acceptedAt", acceptedAt,
                "acceptedString", acceptedString,
                "name", name,
                "pcid", pcid);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Long> acceptedAt = Optional.empty();

        private Optional<String> acceptedString = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> pcid = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder acceptedAt(long acceptedAt) {
            Utils.checkNotNull(acceptedAt, "acceptedAt");
            this.acceptedAt = Optional.ofNullable(acceptedAt);
            return this;
        }

        public Builder acceptedAt(Optional<Long> acceptedAt) {
            Utils.checkNotNull(acceptedAt, "acceptedAt");
            this.acceptedAt = acceptedAt;
            return this;
        }


        public Builder acceptedString(String acceptedString) {
            Utils.checkNotNull(acceptedString, "acceptedString");
            this.acceptedString = Optional.ofNullable(acceptedString);
            return this;
        }

        public Builder acceptedString(Optional<String> acceptedString) {
            Utils.checkNotNull(acceptedString, "acceptedString");
            this.acceptedString = acceptedString;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder pcid(String pcid) {
            Utils.checkNotNull(pcid, "pcid");
            this.pcid = Optional.ofNullable(pcid);
            return this;
        }

        public Builder pcid(Optional<String> pcid) {
            Utils.checkNotNull(pcid, "pcid");
            this.pcid = pcid;
            return this;
        }

        public LinkedTo build() {

            return new LinkedTo(
                acceptedAt, acceptedString, name,
                pcid);
        }

    }
}
