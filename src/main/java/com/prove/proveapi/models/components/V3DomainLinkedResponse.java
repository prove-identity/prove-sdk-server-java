/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class V3DomainLinkedResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linkedFrom")
    private Optional<? extends List<LinkedFrom>> linkedFrom;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linkedTo")
    private Optional<? extends List<LinkedTo>> linkedTo;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestsFrom")
    private Optional<? extends List<RequestsFrom>> requestsFrom;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestsTo")
    private Optional<? extends List<RequestsTo>> requestsTo;

    @JsonCreator
    public V3DomainLinkedResponse(
            @JsonProperty("linkedFrom") Optional<? extends List<LinkedFrom>> linkedFrom,
            @JsonProperty("linkedTo") Optional<? extends List<LinkedTo>> linkedTo,
            @JsonProperty("requestsFrom") Optional<? extends List<RequestsFrom>> requestsFrom,
            @JsonProperty("requestsTo") Optional<? extends List<RequestsTo>> requestsTo) {
        Utils.checkNotNull(linkedFrom, "linkedFrom");
        Utils.checkNotNull(linkedTo, "linkedTo");
        Utils.checkNotNull(requestsFrom, "requestsFrom");
        Utils.checkNotNull(requestsTo, "requestsTo");
        this.linkedFrom = linkedFrom;
        this.linkedTo = linkedTo;
        this.requestsFrom = requestsFrom;
        this.requestsTo = requestsTo;
    }
    
    public V3DomainLinkedResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<LinkedFrom>> linkedFrom() {
        return (Optional<List<LinkedFrom>>) linkedFrom;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<LinkedTo>> linkedTo() {
        return (Optional<List<LinkedTo>>) linkedTo;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<RequestsFrom>> requestsFrom() {
        return (Optional<List<RequestsFrom>>) requestsFrom;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<RequestsTo>> requestsTo() {
        return (Optional<List<RequestsTo>>) requestsTo;
    }

    public static Builder builder() {
        return new Builder();
    }


    public V3DomainLinkedResponse withLinkedFrom(List<LinkedFrom> linkedFrom) {
        Utils.checkNotNull(linkedFrom, "linkedFrom");
        this.linkedFrom = Optional.ofNullable(linkedFrom);
        return this;
    }


    public V3DomainLinkedResponse withLinkedFrom(Optional<? extends List<LinkedFrom>> linkedFrom) {
        Utils.checkNotNull(linkedFrom, "linkedFrom");
        this.linkedFrom = linkedFrom;
        return this;
    }

    public V3DomainLinkedResponse withLinkedTo(List<LinkedTo> linkedTo) {
        Utils.checkNotNull(linkedTo, "linkedTo");
        this.linkedTo = Optional.ofNullable(linkedTo);
        return this;
    }


    public V3DomainLinkedResponse withLinkedTo(Optional<? extends List<LinkedTo>> linkedTo) {
        Utils.checkNotNull(linkedTo, "linkedTo");
        this.linkedTo = linkedTo;
        return this;
    }

    public V3DomainLinkedResponse withRequestsFrom(List<RequestsFrom> requestsFrom) {
        Utils.checkNotNull(requestsFrom, "requestsFrom");
        this.requestsFrom = Optional.ofNullable(requestsFrom);
        return this;
    }


    public V3DomainLinkedResponse withRequestsFrom(Optional<? extends List<RequestsFrom>> requestsFrom) {
        Utils.checkNotNull(requestsFrom, "requestsFrom");
        this.requestsFrom = requestsFrom;
        return this;
    }

    public V3DomainLinkedResponse withRequestsTo(List<RequestsTo> requestsTo) {
        Utils.checkNotNull(requestsTo, "requestsTo");
        this.requestsTo = Optional.ofNullable(requestsTo);
        return this;
    }


    public V3DomainLinkedResponse withRequestsTo(Optional<? extends List<RequestsTo>> requestsTo) {
        Utils.checkNotNull(requestsTo, "requestsTo");
        this.requestsTo = requestsTo;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3DomainLinkedResponse other = (V3DomainLinkedResponse) o;
        return 
            Utils.enhancedDeepEquals(this.linkedFrom, other.linkedFrom) &&
            Utils.enhancedDeepEquals(this.linkedTo, other.linkedTo) &&
            Utils.enhancedDeepEquals(this.requestsFrom, other.requestsFrom) &&
            Utils.enhancedDeepEquals(this.requestsTo, other.requestsTo);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            linkedFrom, linkedTo, requestsFrom,
            requestsTo);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3DomainLinkedResponse.class,
                "linkedFrom", linkedFrom,
                "linkedTo", linkedTo,
                "requestsFrom", requestsFrom,
                "requestsTo", requestsTo);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<LinkedFrom>> linkedFrom = Optional.empty();

        private Optional<? extends List<LinkedTo>> linkedTo = Optional.empty();

        private Optional<? extends List<RequestsFrom>> requestsFrom = Optional.empty();

        private Optional<? extends List<RequestsTo>> requestsTo = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder linkedFrom(List<LinkedFrom> linkedFrom) {
            Utils.checkNotNull(linkedFrom, "linkedFrom");
            this.linkedFrom = Optional.ofNullable(linkedFrom);
            return this;
        }

        public Builder linkedFrom(Optional<? extends List<LinkedFrom>> linkedFrom) {
            Utils.checkNotNull(linkedFrom, "linkedFrom");
            this.linkedFrom = linkedFrom;
            return this;
        }


        public Builder linkedTo(List<LinkedTo> linkedTo) {
            Utils.checkNotNull(linkedTo, "linkedTo");
            this.linkedTo = Optional.ofNullable(linkedTo);
            return this;
        }

        public Builder linkedTo(Optional<? extends List<LinkedTo>> linkedTo) {
            Utils.checkNotNull(linkedTo, "linkedTo");
            this.linkedTo = linkedTo;
            return this;
        }


        public Builder requestsFrom(List<RequestsFrom> requestsFrom) {
            Utils.checkNotNull(requestsFrom, "requestsFrom");
            this.requestsFrom = Optional.ofNullable(requestsFrom);
            return this;
        }

        public Builder requestsFrom(Optional<? extends List<RequestsFrom>> requestsFrom) {
            Utils.checkNotNull(requestsFrom, "requestsFrom");
            this.requestsFrom = requestsFrom;
            return this;
        }


        public Builder requestsTo(List<RequestsTo> requestsTo) {
            Utils.checkNotNull(requestsTo, "requestsTo");
            this.requestsTo = Optional.ofNullable(requestsTo);
            return this;
        }

        public Builder requestsTo(Optional<? extends List<RequestsTo>> requestsTo) {
            Utils.checkNotNull(requestsTo, "requestsTo");
            this.requestsTo = requestsTo;
            return this;
        }

        public V3DomainLinkedResponse build() {

            return new V3DomainLinkedResponse(
                linkedFrom, linkedTo, requestsFrom,
                requestsTo);
        }

    }
}
