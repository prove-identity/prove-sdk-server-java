/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class V3ChallengeResponse {
    /**
     * The evaluation result for the policy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("evaluation")
    private JsonNullable<? extends Map<String, Evaluation>> evaluation;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("individual")
    private Optional<? extends V3ChallengeIndividualRequest> individual;

    /**
     * The next set of allowed calls in the same flow.
     */
    @JsonProperty("next")
    private Map<String, String> next;

    /**
     * True if the challenge was accepted and user info retrieved.
     */
    @JsonProperty("success")
    private boolean success;

    @JsonCreator
    public V3ChallengeResponse(
            @JsonProperty("evaluation") JsonNullable<? extends Map<String, Evaluation>> evaluation,
            @JsonProperty("individual") Optional<? extends V3ChallengeIndividualRequest> individual,
            @JsonProperty("next") Map<String, String> next,
            @JsonProperty("success") boolean success) {
        Utils.checkNotNull(evaluation, "evaluation");
        Utils.checkNotNull(individual, "individual");
        next = Utils.emptyMapIfNull(next);
        Utils.checkNotNull(next, "next");
        Utils.checkNotNull(success, "success");
        this.evaluation = evaluation;
        this.individual = individual;
        this.next = next;
        this.success = success;
    }
    
    public V3ChallengeResponse(
            Map<String, String> next,
            boolean success) {
        this(JsonNullable.undefined(), Optional.empty(), next,
            success);
    }

    /**
     * The evaluation result for the policy
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Evaluation>> evaluation() {
        return (JsonNullable<Map<String, Evaluation>>) evaluation;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<V3ChallengeIndividualRequest> individual() {
        return (Optional<V3ChallengeIndividualRequest>) individual;
    }

    /**
     * The next set of allowed calls in the same flow.
     */
    @JsonIgnore
    public Map<String, String> next() {
        return next;
    }

    /**
     * True if the challenge was accepted and user info retrieved.
     */
    @JsonIgnore
    public boolean success() {
        return success;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The evaluation result for the policy
     */
    public V3ChallengeResponse withEvaluation(Map<String, Evaluation> evaluation) {
        Utils.checkNotNull(evaluation, "evaluation");
        this.evaluation = JsonNullable.of(evaluation);
        return this;
    }

    /**
     * The evaluation result for the policy
     */
    public V3ChallengeResponse withEvaluation(JsonNullable<? extends Map<String, Evaluation>> evaluation) {
        Utils.checkNotNull(evaluation, "evaluation");
        this.evaluation = evaluation;
        return this;
    }

    public V3ChallengeResponse withIndividual(V3ChallengeIndividualRequest individual) {
        Utils.checkNotNull(individual, "individual");
        this.individual = Optional.ofNullable(individual);
        return this;
    }


    public V3ChallengeResponse withIndividual(Optional<? extends V3ChallengeIndividualRequest> individual) {
        Utils.checkNotNull(individual, "individual");
        this.individual = individual;
        return this;
    }

    /**
     * The next set of allowed calls in the same flow.
     */
    public V3ChallengeResponse withNext(Map<String, String> next) {
        Utils.checkNotNull(next, "next");
        this.next = next;
        return this;
    }

    /**
     * True if the challenge was accepted and user info retrieved.
     */
    public V3ChallengeResponse withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3ChallengeResponse other = (V3ChallengeResponse) o;
        return 
            Utils.enhancedDeepEquals(this.evaluation, other.evaluation) &&
            Utils.enhancedDeepEquals(this.individual, other.individual) &&
            Utils.enhancedDeepEquals(this.next, other.next) &&
            Utils.enhancedDeepEquals(this.success, other.success);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            evaluation, individual, next,
            success);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3ChallengeResponse.class,
                "evaluation", evaluation,
                "individual", individual,
                "next", next,
                "success", success);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends Map<String, Evaluation>> evaluation = JsonNullable.undefined();

        private Optional<? extends V3ChallengeIndividualRequest> individual = Optional.empty();

        private Map<String, String> next;

        private Boolean success;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The evaluation result for the policy
         */
        public Builder evaluation(Map<String, Evaluation> evaluation) {
            Utils.checkNotNull(evaluation, "evaluation");
            this.evaluation = JsonNullable.of(evaluation);
            return this;
        }

        /**
         * The evaluation result for the policy
         */
        public Builder evaluation(JsonNullable<? extends Map<String, Evaluation>> evaluation) {
            Utils.checkNotNull(evaluation, "evaluation");
            this.evaluation = evaluation;
            return this;
        }


        public Builder individual(V3ChallengeIndividualRequest individual) {
            Utils.checkNotNull(individual, "individual");
            this.individual = Optional.ofNullable(individual);
            return this;
        }

        public Builder individual(Optional<? extends V3ChallengeIndividualRequest> individual) {
            Utils.checkNotNull(individual, "individual");
            this.individual = individual;
            return this;
        }


        /**
         * The next set of allowed calls in the same flow.
         */
        public Builder next(Map<String, String> next) {
            Utils.checkNotNull(next, "next");
            this.next = next;
            return this;
        }


        /**
         * True if the challenge was accepted and user info retrieved.
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }

        public V3ChallengeResponse build() {

            return new V3ChallengeResponse(
                evaluation, individual, next,
                success);
        }

    }
}
