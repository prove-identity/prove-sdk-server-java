/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class V3VerifyStatusResponse {
    /**
     * A unique ID that Prove generates to refer to a specific identity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identityId")
    private Optional<String> identityId;

    /**
     * The result of the possession check. Possible values are `success`, `pending`, `failed`, and `not_applicable`.
     */
    @JsonProperty("possessionResult")
    private String possessionResult;

    /**
     * The result of the combination of Verify Result and Possession Result. Possible values are `true`, `pending`, and `false`. The success value will be `pending` until the results of both Verify and Possession are returned or one of them fails, blocking the other.
     */
    @JsonProperty("success")
    private String success;

    /**
     * The result of the Verify process. Possible values are `success`, `pending`, `failed`, and `not_applicable`.
     */
    @JsonProperty("verifyResult")
    private String verifyResult;

    @JsonCreator
    public V3VerifyStatusResponse(
            @JsonProperty("identityId") Optional<String> identityId,
            @JsonProperty("possessionResult") String possessionResult,
            @JsonProperty("success") String success,
            @JsonProperty("verifyResult") String verifyResult) {
        Utils.checkNotNull(identityId, "identityId");
        Utils.checkNotNull(possessionResult, "possessionResult");
        Utils.checkNotNull(success, "success");
        Utils.checkNotNull(verifyResult, "verifyResult");
        this.identityId = identityId;
        this.possessionResult = possessionResult;
        this.success = success;
        this.verifyResult = verifyResult;
    }
    
    public V3VerifyStatusResponse(
            String possessionResult,
            String success,
            String verifyResult) {
        this(Optional.empty(), possessionResult, success,
            verifyResult);
    }

    /**
     * A unique ID that Prove generates to refer to a specific identity.
     */
    @JsonIgnore
    public Optional<String> identityId() {
        return identityId;
    }

    /**
     * The result of the possession check. Possible values are `success`, `pending`, `failed`, and `not_applicable`.
     */
    @JsonIgnore
    public String possessionResult() {
        return possessionResult;
    }

    /**
     * The result of the combination of Verify Result and Possession Result. Possible values are `true`, `pending`, and `false`. The success value will be `pending` until the results of both Verify and Possession are returned or one of them fails, blocking the other.
     */
    @JsonIgnore
    public String success() {
        return success;
    }

    /**
     * The result of the Verify process. Possible values are `success`, `pending`, `failed`, and `not_applicable`.
     */
    @JsonIgnore
    public String verifyResult() {
        return verifyResult;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique ID that Prove generates to refer to a specific identity.
     */
    public V3VerifyStatusResponse withIdentityId(String identityId) {
        Utils.checkNotNull(identityId, "identityId");
        this.identityId = Optional.ofNullable(identityId);
        return this;
    }


    /**
     * A unique ID that Prove generates to refer to a specific identity.
     */
    public V3VerifyStatusResponse withIdentityId(Optional<String> identityId) {
        Utils.checkNotNull(identityId, "identityId");
        this.identityId = identityId;
        return this;
    }

    /**
     * The result of the possession check. Possible values are `success`, `pending`, `failed`, and `not_applicable`.
     */
    public V3VerifyStatusResponse withPossessionResult(String possessionResult) {
        Utils.checkNotNull(possessionResult, "possessionResult");
        this.possessionResult = possessionResult;
        return this;
    }

    /**
     * The result of the combination of Verify Result and Possession Result. Possible values are `true`, `pending`, and `false`. The success value will be `pending` until the results of both Verify and Possession are returned or one of them fails, blocking the other.
     */
    public V3VerifyStatusResponse withSuccess(String success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    /**
     * The result of the Verify process. Possible values are `success`, `pending`, `failed`, and `not_applicable`.
     */
    public V3VerifyStatusResponse withVerifyResult(String verifyResult) {
        Utils.checkNotNull(verifyResult, "verifyResult");
        this.verifyResult = verifyResult;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3VerifyStatusResponse other = (V3VerifyStatusResponse) o;
        return 
            Utils.enhancedDeepEquals(this.identityId, other.identityId) &&
            Utils.enhancedDeepEquals(this.possessionResult, other.possessionResult) &&
            Utils.enhancedDeepEquals(this.success, other.success) &&
            Utils.enhancedDeepEquals(this.verifyResult, other.verifyResult);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            identityId, possessionResult, success,
            verifyResult);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3VerifyStatusResponse.class,
                "identityId", identityId,
                "possessionResult", possessionResult,
                "success", success,
                "verifyResult", verifyResult);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> identityId = Optional.empty();

        private String possessionResult;

        private String success;

        private String verifyResult;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A unique ID that Prove generates to refer to a specific identity.
         */
        public Builder identityId(String identityId) {
            Utils.checkNotNull(identityId, "identityId");
            this.identityId = Optional.ofNullable(identityId);
            return this;
        }

        /**
         * A unique ID that Prove generates to refer to a specific identity.
         */
        public Builder identityId(Optional<String> identityId) {
            Utils.checkNotNull(identityId, "identityId");
            this.identityId = identityId;
            return this;
        }


        /**
         * The result of the possession check. Possible values are `success`, `pending`, `failed`, and `not_applicable`.
         */
        public Builder possessionResult(String possessionResult) {
            Utils.checkNotNull(possessionResult, "possessionResult");
            this.possessionResult = possessionResult;
            return this;
        }


        /**
         * The result of the combination of Verify Result and Possession Result. Possible values are `true`, `pending`, and `false`. The success value will be `pending` until the results of both Verify and Possession are returned or one of them fails, blocking the other.
         */
        public Builder success(String success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }


        /**
         * The result of the Verify process. Possible values are `success`, `pending`, `failed`, and `not_applicable`.
         */
        public Builder verifyResult(String verifyResult) {
            Utils.checkNotNull(verifyResult, "verifyResult");
            this.verifyResult = verifyResult;
            return this;
        }

        public V3VerifyStatusResponse build() {

            return new V3VerifyStatusResponse(
                identityId, possessionResult, success,
                verifyResult);
        }

    }
}
