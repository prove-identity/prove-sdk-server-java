/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.prove.proveapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * V3VerifyStatusResponse - Response body for the V3 Verify Status API
 */

public class V3VerifyStatusResponse {

    @JsonProperty("possessionResult")
    private String possessionResult;

    @JsonProperty("success")
    private String success;

    @JsonProperty("verifyResult")
    private String verifyResult;

    @JsonCreator
    public V3VerifyStatusResponse(
            @JsonProperty("possessionResult") String possessionResult,
            @JsonProperty("success") String success,
            @JsonProperty("verifyResult") String verifyResult) {
        Utils.checkNotNull(possessionResult, "possessionResult");
        Utils.checkNotNull(success, "success");
        Utils.checkNotNull(verifyResult, "verifyResult");
        this.possessionResult = possessionResult;
        this.success = success;
        this.verifyResult = verifyResult;
    }

    @JsonIgnore
    public String possessionResult() {
        return possessionResult;
    }

    @JsonIgnore
    public String success() {
        return success;
    }

    @JsonIgnore
    public String verifyResult() {
        return verifyResult;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V3VerifyStatusResponse withPossessionResult(String possessionResult) {
        Utils.checkNotNull(possessionResult, "possessionResult");
        this.possessionResult = possessionResult;
        return this;
    }

    public V3VerifyStatusResponse withSuccess(String success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    public V3VerifyStatusResponse withVerifyResult(String verifyResult) {
        Utils.checkNotNull(verifyResult, "verifyResult");
        this.verifyResult = verifyResult;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3VerifyStatusResponse other = (V3VerifyStatusResponse) o;
        return 
            Objects.deepEquals(this.possessionResult, other.possessionResult) &&
            Objects.deepEquals(this.success, other.success) &&
            Objects.deepEquals(this.verifyResult, other.verifyResult);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            possessionResult,
            success,
            verifyResult);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3VerifyStatusResponse.class,
                "possessionResult", possessionResult,
                "success", success,
                "verifyResult", verifyResult);
    }
    
    public final static class Builder {
 
        private String possessionResult;
 
        private String success;
 
        private String verifyResult;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder possessionResult(String possessionResult) {
            Utils.checkNotNull(possessionResult, "possessionResult");
            this.possessionResult = possessionResult;
            return this;
        }

        public Builder success(String success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }

        public Builder verifyResult(String verifyResult) {
            Utils.checkNotNull(verifyResult, "verifyResult");
            this.verifyResult = verifyResult;
            return this;
        }
        
        public V3VerifyStatusResponse build() {
            return new V3VerifyStatusResponse(
                possessionResult,
                success,
                verifyResult);
        }
    }
}

