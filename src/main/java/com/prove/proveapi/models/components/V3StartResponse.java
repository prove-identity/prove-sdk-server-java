/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

public class V3StartResponse {

    /**
     * A bearer token used by the client-side SDK.
     */
    @JsonProperty("authToken")
    private String authToken;

    /**
     * The unique ID that Prove generates for the flow. To continue the flow, the field will also be used for each of the subsequent API calls in the same flow - it cannot be reused outside of a single flow.
     */
    @JsonProperty("correlationId")
    private String correlationId;

    /**
     * The next set of allowed API calls in the same flow.
     */
    @JsonProperty("next")
    private Map<String, String> next;

    @JsonCreator
    public V3StartResponse(
            @JsonProperty("authToken") String authToken,
            @JsonProperty("correlationId") String correlationId,
            @JsonProperty("next") Map<String, String> next) {
        Utils.checkNotNull(authToken, "authToken");
        Utils.checkNotNull(correlationId, "correlationId");
        next = Utils.emptyMapIfNull(next);
        this.authToken = authToken;
        this.correlationId = correlationId;
        this.next = next;
    }

    /**
     * A bearer token used by the client-side SDK.
     */
    @JsonIgnore
    public String authToken() {
        return authToken;
    }

    /**
     * The unique ID that Prove generates for the flow. To continue the flow, the field will also be used for each of the subsequent API calls in the same flow - it cannot be reused outside of a single flow.
     */
    @JsonIgnore
    public String correlationId() {
        return correlationId;
    }

    /**
     * The next set of allowed API calls in the same flow.
     */
    @JsonIgnore
    public Map<String, String> next() {
        return next;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A bearer token used by the client-side SDK.
     */
    public V3StartResponse withAuthToken(String authToken) {
        Utils.checkNotNull(authToken, "authToken");
        this.authToken = authToken;
        return this;
    }

    /**
     * The unique ID that Prove generates for the flow. To continue the flow, the field will also be used for each of the subsequent API calls in the same flow - it cannot be reused outside of a single flow.
     */
    public V3StartResponse withCorrelationId(String correlationId) {
        Utils.checkNotNull(correlationId, "correlationId");
        this.correlationId = correlationId;
        return this;
    }

    /**
     * The next set of allowed API calls in the same flow.
     */
    public V3StartResponse withNext(Map<String, String> next) {
        Utils.checkNotNull(next, "next");
        this.next = next;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3StartResponse other = (V3StartResponse) o;
        return 
            Objects.deepEquals(this.authToken, other.authToken) &&
            Objects.deepEquals(this.correlationId, other.correlationId) &&
            Objects.deepEquals(this.next, other.next);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            authToken,
            correlationId,
            next);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3StartResponse.class,
                "authToken", authToken,
                "correlationId", correlationId,
                "next", next);
    }
    
    public final static class Builder {
 
        private String authToken;
 
        private String correlationId;
 
        private Map<String, String> next;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A bearer token used by the client-side SDK.
         */
        public Builder authToken(String authToken) {
            Utils.checkNotNull(authToken, "authToken");
            this.authToken = authToken;
            return this;
        }

        /**
         * The unique ID that Prove generates for the flow. To continue the flow, the field will also be used for each of the subsequent API calls in the same flow - it cannot be reused outside of a single flow.
         */
        public Builder correlationId(String correlationId) {
            Utils.checkNotNull(correlationId, "correlationId");
            this.correlationId = correlationId;
            return this;
        }

        /**
         * The next set of allowed API calls in the same flow.
         */
        public Builder next(Map<String, String> next) {
            Utils.checkNotNull(next, "next");
            this.next = next;
            return this;
        }
        
        public V3StartResponse build() {
            return new V3StartResponse(
                authToken,
                correlationId,
                next);
        }
    }
}
