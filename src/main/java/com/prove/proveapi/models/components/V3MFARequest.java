/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.prove.proveapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * V3MFARequest - Request body for the V3 MFA API
 */

public class V3MFARequest {

    /**
     * Client Customer ID is a client-generated unique ID for a specific customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientCustomerId")
    private Optional<String> clientCustomerId;

    /**
     * Client Request ID is a client-generated unique ID for a specific session.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientRequestId")
    private Optional<String> clientRequestId;

    /**
     * Email is the email address of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailAddress")
    private Optional<String> emailAddress;

    /**
     * Final target URL is only required when possessionType=desktop. The final target
     * URL is where the end user will be redirected at the end of Instant Link flow.
     * Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("finalTargetUrl")
    private Optional<String> finalTargetUrl;

    /**
     * IP Address of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipAddress")
    private Optional<String> ipAddress;

    /**
     * Phone number is the number of the mobile phone. Optional in US, required in EU.
     * Not allowed when possessionType is 'none'. Acceptable characters are:
     * alphanumeric with symbols '+'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumber")
    private Optional<String> phoneNumber;

    /**
     * Possession type is based on the method used - either 'desktop' if using desktop,
     * 'mobile' for iOS/Android native apps and mobile web, or 'none' if no possession
     * check is required. Acceptable options are: 'desktop', 'mobile', and 'none'.
     */
    @JsonProperty("possessionType")
    private String possessionType;

    /**
     * SMSMessage is an optional field to customize the message body sent in the
     * Instant Link (possessionType=desktop) or OTP (on mobile) SMS message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smsMessage")
    private Optional<String> smsMessage;

    @JsonCreator
    public V3MFARequest(
            @JsonProperty("clientCustomerId") Optional<String> clientCustomerId,
            @JsonProperty("clientRequestId") Optional<String> clientRequestId,
            @JsonProperty("emailAddress") Optional<String> emailAddress,
            @JsonProperty("finalTargetUrl") Optional<String> finalTargetUrl,
            @JsonProperty("ipAddress") Optional<String> ipAddress,
            @JsonProperty("phoneNumber") Optional<String> phoneNumber,
            @JsonProperty("possessionType") String possessionType,
            @JsonProperty("smsMessage") Optional<String> smsMessage) {
        Utils.checkNotNull(clientCustomerId, "clientCustomerId");
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
        Utils.checkNotNull(ipAddress, "ipAddress");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(possessionType, "possessionType");
        Utils.checkNotNull(smsMessage, "smsMessage");
        this.clientCustomerId = clientCustomerId;
        this.clientRequestId = clientRequestId;
        this.emailAddress = emailAddress;
        this.finalTargetUrl = finalTargetUrl;
        this.ipAddress = ipAddress;
        this.phoneNumber = phoneNumber;
        this.possessionType = possessionType;
        this.smsMessage = smsMessage;
    }
    
    public V3MFARequest(
            String possessionType) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), possessionType, Optional.empty());
    }

    /**
     * Client Customer ID is a client-generated unique ID for a specific customer.
     */
    @JsonIgnore
    public Optional<String> clientCustomerId() {
        return clientCustomerId;
    }

    /**
     * Client Request ID is a client-generated unique ID for a specific session.
     */
    @JsonIgnore
    public Optional<String> clientRequestId() {
        return clientRequestId;
    }

    /**
     * Email is the email address of the customer.
     */
    @JsonIgnore
    public Optional<String> emailAddress() {
        return emailAddress;
    }

    /**
     * Final target URL is only required when possessionType=desktop. The final target
     * URL is where the end user will be redirected at the end of Instant Link flow.
     * Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
     */
    @JsonIgnore
    public Optional<String> finalTargetUrl() {
        return finalTargetUrl;
    }

    /**
     * IP Address of the customer.
     */
    @JsonIgnore
    public Optional<String> ipAddress() {
        return ipAddress;
    }

    /**
     * Phone number is the number of the mobile phone. Optional in US, required in EU.
     * Not allowed when possessionType is 'none'. Acceptable characters are:
     * alphanumeric with symbols '+'.
     */
    @JsonIgnore
    public Optional<String> phoneNumber() {
        return phoneNumber;
    }

    /**
     * Possession type is based on the method used - either 'desktop' if using desktop,
     * 'mobile' for iOS/Android native apps and mobile web, or 'none' if no possession
     * check is required. Acceptable options are: 'desktop', 'mobile', and 'none'.
     */
    @JsonIgnore
    public String possessionType() {
        return possessionType;
    }

    /**
     * SMSMessage is an optional field to customize the message body sent in the
     * Instant Link (possessionType=desktop) or OTP (on mobile) SMS message.
     */
    @JsonIgnore
    public Optional<String> smsMessage() {
        return smsMessage;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Client Customer ID is a client-generated unique ID for a specific customer.
     */
    public V3MFARequest withClientCustomerId(String clientCustomerId) {
        Utils.checkNotNull(clientCustomerId, "clientCustomerId");
        this.clientCustomerId = Optional.ofNullable(clientCustomerId);
        return this;
    }

    /**
     * Client Customer ID is a client-generated unique ID for a specific customer.
     */
    public V3MFARequest withClientCustomerId(Optional<String> clientCustomerId) {
        Utils.checkNotNull(clientCustomerId, "clientCustomerId");
        this.clientCustomerId = clientCustomerId;
        return this;
    }

    /**
     * Client Request ID is a client-generated unique ID for a specific session.
     */
    public V3MFARequest withClientRequestId(String clientRequestId) {
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        this.clientRequestId = Optional.ofNullable(clientRequestId);
        return this;
    }

    /**
     * Client Request ID is a client-generated unique ID for a specific session.
     */
    public V3MFARequest withClientRequestId(Optional<String> clientRequestId) {
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        this.clientRequestId = clientRequestId;
        return this;
    }

    /**
     * Email is the email address of the customer.
     */
    public V3MFARequest withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = Optional.ofNullable(emailAddress);
        return this;
    }

    /**
     * Email is the email address of the customer.
     */
    public V3MFARequest withEmailAddress(Optional<String> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Final target URL is only required when possessionType=desktop. The final target
     * URL is where the end user will be redirected at the end of Instant Link flow.
     * Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
     */
    public V3MFARequest withFinalTargetUrl(String finalTargetUrl) {
        Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
        this.finalTargetUrl = Optional.ofNullable(finalTargetUrl);
        return this;
    }

    /**
     * Final target URL is only required when possessionType=desktop. The final target
     * URL is where the end user will be redirected at the end of Instant Link flow.
     * Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
     */
    public V3MFARequest withFinalTargetUrl(Optional<String> finalTargetUrl) {
        Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
        this.finalTargetUrl = finalTargetUrl;
        return this;
    }

    /**
     * IP Address of the customer.
     */
    public V3MFARequest withIpAddress(String ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = Optional.ofNullable(ipAddress);
        return this;
    }

    /**
     * IP Address of the customer.
     */
    public V3MFARequest withIpAddress(Optional<String> ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * Phone number is the number of the mobile phone. Optional in US, required in EU.
     * Not allowed when possessionType is 'none'. Acceptable characters are:
     * alphanumeric with symbols '+'.
     */
    public V3MFARequest withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }

    /**
     * Phone number is the number of the mobile phone. Optional in US, required in EU.
     * Not allowed when possessionType is 'none'. Acceptable characters are:
     * alphanumeric with symbols '+'.
     */
    public V3MFARequest withPhoneNumber(Optional<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Possession type is based on the method used - either 'desktop' if using desktop,
     * 'mobile' for iOS/Android native apps and mobile web, or 'none' if no possession
     * check is required. Acceptable options are: 'desktop', 'mobile', and 'none'.
     */
    public V3MFARequest withPossessionType(String possessionType) {
        Utils.checkNotNull(possessionType, "possessionType");
        this.possessionType = possessionType;
        return this;
    }

    /**
     * SMSMessage is an optional field to customize the message body sent in the
     * Instant Link (possessionType=desktop) or OTP (on mobile) SMS message.
     */
    public V3MFARequest withSmsMessage(String smsMessage) {
        Utils.checkNotNull(smsMessage, "smsMessage");
        this.smsMessage = Optional.ofNullable(smsMessage);
        return this;
    }

    /**
     * SMSMessage is an optional field to customize the message body sent in the
     * Instant Link (possessionType=desktop) or OTP (on mobile) SMS message.
     */
    public V3MFARequest withSmsMessage(Optional<String> smsMessage) {
        Utils.checkNotNull(smsMessage, "smsMessage");
        this.smsMessage = smsMessage;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3MFARequest other = (V3MFARequest) o;
        return 
            Objects.deepEquals(this.clientCustomerId, other.clientCustomerId) &&
            Objects.deepEquals(this.clientRequestId, other.clientRequestId) &&
            Objects.deepEquals(this.emailAddress, other.emailAddress) &&
            Objects.deepEquals(this.finalTargetUrl, other.finalTargetUrl) &&
            Objects.deepEquals(this.ipAddress, other.ipAddress) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            Objects.deepEquals(this.possessionType, other.possessionType) &&
            Objects.deepEquals(this.smsMessage, other.smsMessage);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientCustomerId,
            clientRequestId,
            emailAddress,
            finalTargetUrl,
            ipAddress,
            phoneNumber,
            possessionType,
            smsMessage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3MFARequest.class,
                "clientCustomerId", clientCustomerId,
                "clientRequestId", clientRequestId,
                "emailAddress", emailAddress,
                "finalTargetUrl", finalTargetUrl,
                "ipAddress", ipAddress,
                "phoneNumber", phoneNumber,
                "possessionType", possessionType,
                "smsMessage", smsMessage);
    }
    
    public final static class Builder {
 
        private Optional<String> clientCustomerId = Optional.empty();
 
        private Optional<String> clientRequestId = Optional.empty();
 
        private Optional<String> emailAddress = Optional.empty();
 
        private Optional<String> finalTargetUrl = Optional.empty();
 
        private Optional<String> ipAddress = Optional.empty();
 
        private Optional<String> phoneNumber = Optional.empty();
 
        private String possessionType;
 
        private Optional<String> smsMessage = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Client Customer ID is a client-generated unique ID for a specific customer.
         */
        public Builder clientCustomerId(String clientCustomerId) {
            Utils.checkNotNull(clientCustomerId, "clientCustomerId");
            this.clientCustomerId = Optional.ofNullable(clientCustomerId);
            return this;
        }

        /**
         * Client Customer ID is a client-generated unique ID for a specific customer.
         */
        public Builder clientCustomerId(Optional<String> clientCustomerId) {
            Utils.checkNotNull(clientCustomerId, "clientCustomerId");
            this.clientCustomerId = clientCustomerId;
            return this;
        }

        /**
         * Client Request ID is a client-generated unique ID for a specific session.
         */
        public Builder clientRequestId(String clientRequestId) {
            Utils.checkNotNull(clientRequestId, "clientRequestId");
            this.clientRequestId = Optional.ofNullable(clientRequestId);
            return this;
        }

        /**
         * Client Request ID is a client-generated unique ID for a specific session.
         */
        public Builder clientRequestId(Optional<String> clientRequestId) {
            Utils.checkNotNull(clientRequestId, "clientRequestId");
            this.clientRequestId = clientRequestId;
            return this;
        }

        /**
         * Email is the email address of the customer.
         */
        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = Optional.ofNullable(emailAddress);
            return this;
        }

        /**
         * Email is the email address of the customer.
         */
        public Builder emailAddress(Optional<String> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * Final target URL is only required when possessionType=desktop. The final target
         * URL is where the end user will be redirected at the end of Instant Link flow.
         * Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
         */
        public Builder finalTargetUrl(String finalTargetUrl) {
            Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
            this.finalTargetUrl = Optional.ofNullable(finalTargetUrl);
            return this;
        }

        /**
         * Final target URL is only required when possessionType=desktop. The final target
         * URL is where the end user will be redirected at the end of Instant Link flow.
         * Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
         */
        public Builder finalTargetUrl(Optional<String> finalTargetUrl) {
            Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
            this.finalTargetUrl = finalTargetUrl;
            return this;
        }

        /**
         * IP Address of the customer.
         */
        public Builder ipAddress(String ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = Optional.ofNullable(ipAddress);
            return this;
        }

        /**
         * IP Address of the customer.
         */
        public Builder ipAddress(Optional<String> ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = ipAddress;
            return this;
        }

        /**
         * Phone number is the number of the mobile phone. Optional in US, required in EU.
         * Not allowed when possessionType is 'none'. Acceptable characters are:
         * alphanumeric with symbols '+'.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * Phone number is the number of the mobile phone. Optional in US, required in EU.
         * Not allowed when possessionType is 'none'. Acceptable characters are:
         * alphanumeric with symbols '+'.
         */
        public Builder phoneNumber(Optional<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * Possession type is based on the method used - either 'desktop' if using desktop,
         * 'mobile' for iOS/Android native apps and mobile web, or 'none' if no possession
         * check is required. Acceptable options are: 'desktop', 'mobile', and 'none'.
         */
        public Builder possessionType(String possessionType) {
            Utils.checkNotNull(possessionType, "possessionType");
            this.possessionType = possessionType;
            return this;
        }

        /**
         * SMSMessage is an optional field to customize the message body sent in the
         * Instant Link (possessionType=desktop) or OTP (on mobile) SMS message.
         */
        public Builder smsMessage(String smsMessage) {
            Utils.checkNotNull(smsMessage, "smsMessage");
            this.smsMessage = Optional.ofNullable(smsMessage);
            return this;
        }

        /**
         * SMSMessage is an optional field to customize the message body sent in the
         * Instant Link (possessionType=desktop) or OTP (on mobile) SMS message.
         */
        public Builder smsMessage(Optional<String> smsMessage) {
            Utils.checkNotNull(smsMessage, "smsMessage");
            this.smsMessage = smsMessage;
            return this;
        }
        
        public V3MFARequest build() {
            return new V3MFARequest(
                clientCustomerId,
                clientRequestId,
                emailAddress,
                finalTargetUrl,
                ipAddress,
                phoneNumber,
                possessionType,
                smsMessage);
        }
    }
}

