/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.prove.proveapi.utils.SpeakeasyMetadata;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class V3TokenRequest {

    /**
     * ClientID is the optional client ID.
     */
    @SpeakeasyMetadata("form:name=client_id")
    private String clientId;

    /**
     * ClientSecret is the client secret ID provided to the customer during onboarding.
     */
    @SpeakeasyMetadata("form:name=client_secret")
    private String clientSecret;

    /**
     * GrantType only allows option: `client_credentials`.
     */
    @SpeakeasyMetadata("form:name=grant_type")
    private String grantType;

    @JsonCreator
    public V3TokenRequest(
            String clientId,
            String clientSecret,
            String grantType) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(grantType, "grantType");
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.grantType = grantType;
    }

    /**
     * ClientID is the optional client ID.
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * ClientSecret is the client secret ID provided to the customer during onboarding.
     */
    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * GrantType only allows option: `client_credentials`.
     */
    @JsonIgnore
    public String grantType() {
        return grantType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * ClientID is the optional client ID.
     */
    public V3TokenRequest withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * ClientSecret is the client secret ID provided to the customer during onboarding.
     */
    public V3TokenRequest withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * GrantType only allows option: `client_credentials`.
     */
    public V3TokenRequest withGrantType(String grantType) {
        Utils.checkNotNull(grantType, "grantType");
        this.grantType = grantType;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3TokenRequest other = (V3TokenRequest) o;
        return 
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            Objects.deepEquals(this.grantType, other.grantType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientId,
            clientSecret,
            grantType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3TokenRequest.class,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "grantType", grantType);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String clientSecret;
 
        private String grantType;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ClientID is the optional client ID.
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * ClientSecret is the client secret ID provided to the customer during onboarding.
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * GrantType only allows option: `client_credentials`.
         */
        public Builder grantType(String grantType) {
            Utils.checkNotNull(grantType, "grantType");
            this.grantType = grantType;
            return this;
        }
        
        public V3TokenRequest build() {
            return new V3TokenRequest(
                clientId,
                clientSecret,
                grantType);
        }
    }
}
