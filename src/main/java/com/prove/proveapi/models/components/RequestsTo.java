/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class RequestsTo {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pcid")
    private Optional<String> pcid;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedAt")
    private Optional<Long> requestedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedString")
    private Optional<String> requestedString;

    @JsonCreator
    public RequestsTo(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("pcid") Optional<String> pcid,
            @JsonProperty("requestedAt") Optional<Long> requestedAt,
            @JsonProperty("requestedString") Optional<String> requestedString) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(pcid, "pcid");
        Utils.checkNotNull(requestedAt, "requestedAt");
        Utils.checkNotNull(requestedString, "requestedString");
        this.name = name;
        this.pcid = pcid;
        this.requestedAt = requestedAt;
        this.requestedString = requestedString;
    }
    
    public RequestsTo() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> pcid() {
        return pcid;
    }

    @JsonIgnore
    public Optional<Long> requestedAt() {
        return requestedAt;
    }

    @JsonIgnore
    public Optional<String> requestedString() {
        return requestedString;
    }

    public static Builder builder() {
        return new Builder();
    }


    public RequestsTo withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public RequestsTo withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public RequestsTo withPcid(String pcid) {
        Utils.checkNotNull(pcid, "pcid");
        this.pcid = Optional.ofNullable(pcid);
        return this;
    }


    public RequestsTo withPcid(Optional<String> pcid) {
        Utils.checkNotNull(pcid, "pcid");
        this.pcid = pcid;
        return this;
    }

    public RequestsTo withRequestedAt(long requestedAt) {
        Utils.checkNotNull(requestedAt, "requestedAt");
        this.requestedAt = Optional.ofNullable(requestedAt);
        return this;
    }


    public RequestsTo withRequestedAt(Optional<Long> requestedAt) {
        Utils.checkNotNull(requestedAt, "requestedAt");
        this.requestedAt = requestedAt;
        return this;
    }

    public RequestsTo withRequestedString(String requestedString) {
        Utils.checkNotNull(requestedString, "requestedString");
        this.requestedString = Optional.ofNullable(requestedString);
        return this;
    }


    public RequestsTo withRequestedString(Optional<String> requestedString) {
        Utils.checkNotNull(requestedString, "requestedString");
        this.requestedString = requestedString;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestsTo other = (RequestsTo) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.pcid, other.pcid) &&
            Utils.enhancedDeepEquals(this.requestedAt, other.requestedAt) &&
            Utils.enhancedDeepEquals(this.requestedString, other.requestedString);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, pcid, requestedAt,
            requestedString);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestsTo.class,
                "name", name,
                "pcid", pcid,
                "requestedAt", requestedAt,
                "requestedString", requestedString);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> name = Optional.empty();

        private Optional<String> pcid = Optional.empty();

        private Optional<Long> requestedAt = Optional.empty();

        private Optional<String> requestedString = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder pcid(String pcid) {
            Utils.checkNotNull(pcid, "pcid");
            this.pcid = Optional.ofNullable(pcid);
            return this;
        }

        public Builder pcid(Optional<String> pcid) {
            Utils.checkNotNull(pcid, "pcid");
            this.pcid = pcid;
            return this;
        }


        public Builder requestedAt(long requestedAt) {
            Utils.checkNotNull(requestedAt, "requestedAt");
            this.requestedAt = Optional.ofNullable(requestedAt);
            return this;
        }

        public Builder requestedAt(Optional<Long> requestedAt) {
            Utils.checkNotNull(requestedAt, "requestedAt");
            this.requestedAt = requestedAt;
            return this;
        }


        public Builder requestedString(String requestedString) {
            Utils.checkNotNull(requestedString, "requestedString");
            this.requestedString = Optional.ofNullable(requestedString);
            return this;
        }

        public Builder requestedString(Optional<String> requestedString) {
            Utils.checkNotNull(requestedString, "requestedString");
            this.requestedString = requestedString;
            return this;
        }

        public RequestsTo build() {

            return new RequestsTo(
                name, pcid, requestedAt,
                requestedString);
        }

    }
}
