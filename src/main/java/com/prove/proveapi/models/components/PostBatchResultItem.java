/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * PostBatchResultItem
 * 
 * <p>Represents a single identity item in the response.
 */
public class PostBatchResultItem {
    /**
     * An error message that is returned if the identity cannot be successfully enrolled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<String> error;

    /**
     * A unique Prove-generated identifier for the enrolled identity. This is a UUID that can be used to reference the identity in future requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identityId")
    private Optional<String> identityId;

    @JsonCreator
    public PostBatchResultItem(
            @JsonProperty("error") Optional<String> error,
            @JsonProperty("identityId") Optional<String> identityId) {
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(identityId, "identityId");
        this.error = error;
        this.identityId = identityId;
    }
    
    public PostBatchResultItem() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * An error message that is returned if the identity cannot be successfully enrolled.
     */
    @JsonIgnore
    public Optional<String> error() {
        return error;
    }

    /**
     * A unique Prove-generated identifier for the enrolled identity. This is a UUID that can be used to reference the identity in future requests.
     */
    @JsonIgnore
    public Optional<String> identityId() {
        return identityId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * An error message that is returned if the identity cannot be successfully enrolled.
     */
    public PostBatchResultItem withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }


    /**
     * An error message that is returned if the identity cannot be successfully enrolled.
     */
    public PostBatchResultItem withError(Optional<String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    /**
     * A unique Prove-generated identifier for the enrolled identity. This is a UUID that can be used to reference the identity in future requests.
     */
    public PostBatchResultItem withIdentityId(String identityId) {
        Utils.checkNotNull(identityId, "identityId");
        this.identityId = Optional.ofNullable(identityId);
        return this;
    }


    /**
     * A unique Prove-generated identifier for the enrolled identity. This is a UUID that can be used to reference the identity in future requests.
     */
    public PostBatchResultItem withIdentityId(Optional<String> identityId) {
        Utils.checkNotNull(identityId, "identityId");
        this.identityId = identityId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostBatchResultItem other = (PostBatchResultItem) o;
        return 
            Utils.enhancedDeepEquals(this.error, other.error) &&
            Utils.enhancedDeepEquals(this.identityId, other.identityId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            error, identityId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostBatchResultItem.class,
                "error", error,
                "identityId", identityId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> error = Optional.empty();

        private Optional<String> identityId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * An error message that is returned if the identity cannot be successfully enrolled.
         */
        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        /**
         * An error message that is returned if the identity cannot be successfully enrolled.
         */
        public Builder error(Optional<String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }


        /**
         * A unique Prove-generated identifier for the enrolled identity. This is a UUID that can be used to reference the identity in future requests.
         */
        public Builder identityId(String identityId) {
            Utils.checkNotNull(identityId, "identityId");
            this.identityId = Optional.ofNullable(identityId);
            return this;
        }

        /**
         * A unique Prove-generated identifier for the enrolled identity. This is a UUID that can be used to reference the identity in future requests.
         */
        public Builder identityId(Optional<String> identityId) {
            Utils.checkNotNull(identityId, "identityId");
            this.identityId = identityId;
            return this;
        }

        public PostBatchResultItem build() {

            return new PostBatchResultItem(
                error, identityId);
        }

    }
}
