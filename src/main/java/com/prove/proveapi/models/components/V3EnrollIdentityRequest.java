/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * V3EnrollIdentityRequest
 * 
 * <p>Request body for the V3 Enroll Identity API.
 */
public class V3EnrollIdentityRequest {
    /**
     * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include personally identifiable information (PII) in this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientCustomerId")
    private Optional<String> clientCustomerId;

    /**
     * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientRequestId")
    private Optional<String> clientRequestId;

    /**
     * A string that is the unique identifier for the Prove Key on the device. Only applicable if you are leveraging Prove Unify.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceId")
    private Optional<String> deviceId;

    /**
     * The number of the consumer being enrolled. US phone numbers can be passed in with or without a leading +1. Acceptable characters are: alphanumeric with symbols '+'.
     */
    @JsonProperty("phoneNumber")
    private String phoneNumber;

    @JsonCreator
    public V3EnrollIdentityRequest(
            @JsonProperty("clientCustomerId") Optional<String> clientCustomerId,
            @JsonProperty("clientRequestId") Optional<String> clientRequestId,
            @JsonProperty("deviceId") Optional<String> deviceId,
            @JsonProperty("phoneNumber") String phoneNumber) {
        Utils.checkNotNull(clientCustomerId, "clientCustomerId");
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        Utils.checkNotNull(deviceId, "deviceId");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.clientCustomerId = clientCustomerId;
        this.clientRequestId = clientRequestId;
        this.deviceId = deviceId;
        this.phoneNumber = phoneNumber;
    }
    
    public V3EnrollIdentityRequest(
            String phoneNumber) {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            phoneNumber);
    }

    /**
     * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include personally identifiable information (PII) in this field.
     */
    @JsonIgnore
    public Optional<String> clientCustomerId() {
        return clientCustomerId;
    }

    /**
     * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     */
    @JsonIgnore
    public Optional<String> clientRequestId() {
        return clientRequestId;
    }

    /**
     * A string that is the unique identifier for the Prove Key on the device. Only applicable if you are leveraging Prove Unify.
     */
    @JsonIgnore
    public Optional<String> deviceId() {
        return deviceId;
    }

    /**
     * The number of the consumer being enrolled. US phone numbers can be passed in with or without a leading +1. Acceptable characters are: alphanumeric with symbols '+'.
     */
    @JsonIgnore
    public String phoneNumber() {
        return phoneNumber;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include personally identifiable information (PII) in this field.
     */
    public V3EnrollIdentityRequest withClientCustomerId(String clientCustomerId) {
        Utils.checkNotNull(clientCustomerId, "clientCustomerId");
        this.clientCustomerId = Optional.ofNullable(clientCustomerId);
        return this;
    }


    /**
     * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include personally identifiable information (PII) in this field.
     */
    public V3EnrollIdentityRequest withClientCustomerId(Optional<String> clientCustomerId) {
        Utils.checkNotNull(clientCustomerId, "clientCustomerId");
        this.clientCustomerId = clientCustomerId;
        return this;
    }

    /**
     * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     */
    public V3EnrollIdentityRequest withClientRequestId(String clientRequestId) {
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        this.clientRequestId = Optional.ofNullable(clientRequestId);
        return this;
    }


    /**
     * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     */
    public V3EnrollIdentityRequest withClientRequestId(Optional<String> clientRequestId) {
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        this.clientRequestId = clientRequestId;
        return this;
    }

    /**
     * A string that is the unique identifier for the Prove Key on the device. Only applicable if you are leveraging Prove Unify.
     */
    public V3EnrollIdentityRequest withDeviceId(String deviceId) {
        Utils.checkNotNull(deviceId, "deviceId");
        this.deviceId = Optional.ofNullable(deviceId);
        return this;
    }


    /**
     * A string that is the unique identifier for the Prove Key on the device. Only applicable if you are leveraging Prove Unify.
     */
    public V3EnrollIdentityRequest withDeviceId(Optional<String> deviceId) {
        Utils.checkNotNull(deviceId, "deviceId");
        this.deviceId = deviceId;
        return this;
    }

    /**
     * The number of the consumer being enrolled. US phone numbers can be passed in with or without a leading +1. Acceptable characters are: alphanumeric with symbols '+'.
     */
    public V3EnrollIdentityRequest withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3EnrollIdentityRequest other = (V3EnrollIdentityRequest) o;
        return 
            Utils.enhancedDeepEquals(this.clientCustomerId, other.clientCustomerId) &&
            Utils.enhancedDeepEquals(this.clientRequestId, other.clientRequestId) &&
            Utils.enhancedDeepEquals(this.deviceId, other.deviceId) &&
            Utils.enhancedDeepEquals(this.phoneNumber, other.phoneNumber);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            clientCustomerId, clientRequestId, deviceId,
            phoneNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3EnrollIdentityRequest.class,
                "clientCustomerId", clientCustomerId,
                "clientRequestId", clientRequestId,
                "deviceId", deviceId,
                "phoneNumber", phoneNumber);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> clientCustomerId = Optional.empty();

        private Optional<String> clientRequestId = Optional.empty();

        private Optional<String> deviceId = Optional.empty();

        private String phoneNumber;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include personally identifiable information (PII) in this field.
         */
        public Builder clientCustomerId(String clientCustomerId) {
            Utils.checkNotNull(clientCustomerId, "clientCustomerId");
            this.clientCustomerId = Optional.ofNullable(clientCustomerId);
            return this;
        }

        /**
         * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include personally identifiable information (PII) in this field.
         */
        public Builder clientCustomerId(Optional<String> clientCustomerId) {
            Utils.checkNotNull(clientCustomerId, "clientCustomerId");
            this.clientCustomerId = clientCustomerId;
            return this;
        }


        /**
         * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
         */
        public Builder clientRequestId(String clientRequestId) {
            Utils.checkNotNull(clientRequestId, "clientRequestId");
            this.clientRequestId = Optional.ofNullable(clientRequestId);
            return this;
        }

        /**
         * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
         */
        public Builder clientRequestId(Optional<String> clientRequestId) {
            Utils.checkNotNull(clientRequestId, "clientRequestId");
            this.clientRequestId = clientRequestId;
            return this;
        }


        /**
         * A string that is the unique identifier for the Prove Key on the device. Only applicable if you are leveraging Prove Unify.
         */
        public Builder deviceId(String deviceId) {
            Utils.checkNotNull(deviceId, "deviceId");
            this.deviceId = Optional.ofNullable(deviceId);
            return this;
        }

        /**
         * A string that is the unique identifier for the Prove Key on the device. Only applicable if you are leveraging Prove Unify.
         */
        public Builder deviceId(Optional<String> deviceId) {
            Utils.checkNotNull(deviceId, "deviceId");
            this.deviceId = deviceId;
            return this;
        }


        /**
         * The number of the consumer being enrolled. US phone numbers can be passed in with or without a leading +1. Acceptable characters are: alphanumeric with symbols '+'.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        public V3EnrollIdentityRequest build() {

            return new V3EnrollIdentityRequest(
                clientCustomerId, clientRequestId, deviceId,
                phoneNumber);
        }

    }
}
