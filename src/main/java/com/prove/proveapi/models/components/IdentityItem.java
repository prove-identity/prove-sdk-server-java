/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;


public class IdentityItem {
    /**
     * The name of the client associated with the identity.
     */
    @JsonProperty("clientName")
    private String clientName;

    /**
     * The Prove-generated unique ID for the specific identity.
     */
    @JsonProperty("identityId")
    private String identityId;

    /**
     * The Prove Customer ID (PCID) associated with the identity.
     */
    @JsonProperty("pcid")
    private String pcid;

    @JsonCreator
    public IdentityItem(
            @JsonProperty("clientName") String clientName,
            @JsonProperty("identityId") String identityId,
            @JsonProperty("pcid") String pcid) {
        Utils.checkNotNull(clientName, "clientName");
        Utils.checkNotNull(identityId, "identityId");
        Utils.checkNotNull(pcid, "pcid");
        this.clientName = clientName;
        this.identityId = identityId;
        this.pcid = pcid;
    }

    /**
     * The name of the client associated with the identity.
     */
    @JsonIgnore
    public String clientName() {
        return clientName;
    }

    /**
     * The Prove-generated unique ID for the specific identity.
     */
    @JsonIgnore
    public String identityId() {
        return identityId;
    }

    /**
     * The Prove Customer ID (PCID) associated with the identity.
     */
    @JsonIgnore
    public String pcid() {
        return pcid;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the client associated with the identity.
     */
    public IdentityItem withClientName(String clientName) {
        Utils.checkNotNull(clientName, "clientName");
        this.clientName = clientName;
        return this;
    }

    /**
     * The Prove-generated unique ID for the specific identity.
     */
    public IdentityItem withIdentityId(String identityId) {
        Utils.checkNotNull(identityId, "identityId");
        this.identityId = identityId;
        return this;
    }

    /**
     * The Prove Customer ID (PCID) associated with the identity.
     */
    public IdentityItem withPcid(String pcid) {
        Utils.checkNotNull(pcid, "pcid");
        this.pcid = pcid;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IdentityItem other = (IdentityItem) o;
        return 
            Utils.enhancedDeepEquals(this.clientName, other.clientName) &&
            Utils.enhancedDeepEquals(this.identityId, other.identityId) &&
            Utils.enhancedDeepEquals(this.pcid, other.pcid);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            clientName, identityId, pcid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IdentityItem.class,
                "clientName", clientName,
                "identityId", identityId,
                "pcid", pcid);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String clientName;

        private String identityId;

        private String pcid;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name of the client associated with the identity.
         */
        public Builder clientName(String clientName) {
            Utils.checkNotNull(clientName, "clientName");
            this.clientName = clientName;
            return this;
        }


        /**
         * The Prove-generated unique ID for the specific identity.
         */
        public Builder identityId(String identityId) {
            Utils.checkNotNull(identityId, "identityId");
            this.identityId = identityId;
            return this;
        }


        /**
         * The Prove Customer ID (PCID) associated with the identity.
         */
        public Builder pcid(String pcid) {
            Utils.checkNotNull(pcid, "pcid");
            this.pcid = pcid;
            return this;
        }

        public IdentityItem build() {

            return new IdentityItem(
                clientName, identityId, pcid);
        }

    }
}
