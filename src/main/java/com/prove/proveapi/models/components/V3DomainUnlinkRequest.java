/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class V3DomainUnlinkRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pcidFrom")
    private Optional<String> pcidFrom;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pcidTo")
    private Optional<String> pcidTo;

    @JsonCreator
    public V3DomainUnlinkRequest(
            @JsonProperty("pcidFrom") Optional<String> pcidFrom,
            @JsonProperty("pcidTo") Optional<String> pcidTo) {
        Utils.checkNotNull(pcidFrom, "pcidFrom");
        Utils.checkNotNull(pcidTo, "pcidTo");
        this.pcidFrom = pcidFrom;
        this.pcidTo = pcidTo;
    }
    
    public V3DomainUnlinkRequest() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> pcidFrom() {
        return pcidFrom;
    }

    @JsonIgnore
    public Optional<String> pcidTo() {
        return pcidTo;
    }

    public static Builder builder() {
        return new Builder();
    }


    public V3DomainUnlinkRequest withPcidFrom(String pcidFrom) {
        Utils.checkNotNull(pcidFrom, "pcidFrom");
        this.pcidFrom = Optional.ofNullable(pcidFrom);
        return this;
    }


    public V3DomainUnlinkRequest withPcidFrom(Optional<String> pcidFrom) {
        Utils.checkNotNull(pcidFrom, "pcidFrom");
        this.pcidFrom = pcidFrom;
        return this;
    }

    public V3DomainUnlinkRequest withPcidTo(String pcidTo) {
        Utils.checkNotNull(pcidTo, "pcidTo");
        this.pcidTo = Optional.ofNullable(pcidTo);
        return this;
    }


    public V3DomainUnlinkRequest withPcidTo(Optional<String> pcidTo) {
        Utils.checkNotNull(pcidTo, "pcidTo");
        this.pcidTo = pcidTo;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3DomainUnlinkRequest other = (V3DomainUnlinkRequest) o;
        return 
            Utils.enhancedDeepEquals(this.pcidFrom, other.pcidFrom) &&
            Utils.enhancedDeepEquals(this.pcidTo, other.pcidTo);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            pcidFrom, pcidTo);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3DomainUnlinkRequest.class,
                "pcidFrom", pcidFrom,
                "pcidTo", pcidTo);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> pcidFrom = Optional.empty();

        private Optional<String> pcidTo = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder pcidFrom(String pcidFrom) {
            Utils.checkNotNull(pcidFrom, "pcidFrom");
            this.pcidFrom = Optional.ofNullable(pcidFrom);
            return this;
        }

        public Builder pcidFrom(Optional<String> pcidFrom) {
            Utils.checkNotNull(pcidFrom, "pcidFrom");
            this.pcidFrom = pcidFrom;
            return this;
        }


        public Builder pcidTo(String pcidTo) {
            Utils.checkNotNull(pcidTo, "pcidTo");
            this.pcidTo = Optional.ofNullable(pcidTo);
            return this;
        }

        public Builder pcidTo(Optional<String> pcidTo) {
            Utils.checkNotNull(pcidTo, "pcidTo");
            this.pcidTo = pcidTo;
            return this;
        }

        public V3DomainUnlinkRequest build() {

            return new V3DomainUnlinkRequest(
                pcidFrom, pcidTo);
        }

    }
}
