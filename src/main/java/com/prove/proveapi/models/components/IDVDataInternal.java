/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.prove.proveapi.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class IDVDataInternal {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSource1")
    private Optional<? extends DataSourceInternal> dataSource1;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSource2")
    private Optional<? extends DataSourceInternal> dataSource2;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multiCIPConfidence")
    private Optional<String> multiCIPConfidence;

    @JsonCreator
    public IDVDataInternal(
            @JsonProperty("dataSource1") Optional<? extends DataSourceInternal> dataSource1,
            @JsonProperty("dataSource2") Optional<? extends DataSourceInternal> dataSource2,
            @JsonProperty("multiCIPConfidence") Optional<String> multiCIPConfidence) {
        Utils.checkNotNull(dataSource1, "dataSource1");
        Utils.checkNotNull(dataSource2, "dataSource2");
        Utils.checkNotNull(multiCIPConfidence, "multiCIPConfidence");
        this.dataSource1 = dataSource1;
        this.dataSource2 = dataSource2;
        this.multiCIPConfidence = multiCIPConfidence;
    }
    
    public IDVDataInternal() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataSourceInternal> dataSource1() {
        return (Optional<DataSourceInternal>) dataSource1;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataSourceInternal> dataSource2() {
        return (Optional<DataSourceInternal>) dataSource2;
    }

    @JsonIgnore
    public Optional<String> multiCIPConfidence() {
        return multiCIPConfidence;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public IDVDataInternal withDataSource1(DataSourceInternal dataSource1) {
        Utils.checkNotNull(dataSource1, "dataSource1");
        this.dataSource1 = Optional.ofNullable(dataSource1);
        return this;
    }

    public IDVDataInternal withDataSource1(Optional<? extends DataSourceInternal> dataSource1) {
        Utils.checkNotNull(dataSource1, "dataSource1");
        this.dataSource1 = dataSource1;
        return this;
    }

    public IDVDataInternal withDataSource2(DataSourceInternal dataSource2) {
        Utils.checkNotNull(dataSource2, "dataSource2");
        this.dataSource2 = Optional.ofNullable(dataSource2);
        return this;
    }

    public IDVDataInternal withDataSource2(Optional<? extends DataSourceInternal> dataSource2) {
        Utils.checkNotNull(dataSource2, "dataSource2");
        this.dataSource2 = dataSource2;
        return this;
    }

    public IDVDataInternal withMultiCIPConfidence(String multiCIPConfidence) {
        Utils.checkNotNull(multiCIPConfidence, "multiCIPConfidence");
        this.multiCIPConfidence = Optional.ofNullable(multiCIPConfidence);
        return this;
    }

    public IDVDataInternal withMultiCIPConfidence(Optional<String> multiCIPConfidence) {
        Utils.checkNotNull(multiCIPConfidence, "multiCIPConfidence");
        this.multiCIPConfidence = multiCIPConfidence;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IDVDataInternal other = (IDVDataInternal) o;
        return 
            Objects.deepEquals(this.dataSource1, other.dataSource1) &&
            Objects.deepEquals(this.dataSource2, other.dataSource2) &&
            Objects.deepEquals(this.multiCIPConfidence, other.multiCIPConfidence);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            dataSource1,
            dataSource2,
            multiCIPConfidence);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IDVDataInternal.class,
                "dataSource1", dataSource1,
                "dataSource2", dataSource2,
                "multiCIPConfidence", multiCIPConfidence);
    }
    
    public final static class Builder {
 
        private Optional<? extends DataSourceInternal> dataSource1 = Optional.empty();
 
        private Optional<? extends DataSourceInternal> dataSource2 = Optional.empty();
 
        private Optional<String> multiCIPConfidence = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder dataSource1(DataSourceInternal dataSource1) {
            Utils.checkNotNull(dataSource1, "dataSource1");
            this.dataSource1 = Optional.ofNullable(dataSource1);
            return this;
        }

        public Builder dataSource1(Optional<? extends DataSourceInternal> dataSource1) {
            Utils.checkNotNull(dataSource1, "dataSource1");
            this.dataSource1 = dataSource1;
            return this;
        }

        public Builder dataSource2(DataSourceInternal dataSource2) {
            Utils.checkNotNull(dataSource2, "dataSource2");
            this.dataSource2 = Optional.ofNullable(dataSource2);
            return this;
        }

        public Builder dataSource2(Optional<? extends DataSourceInternal> dataSource2) {
            Utils.checkNotNull(dataSource2, "dataSource2");
            this.dataSource2 = dataSource2;
            return this;
        }

        public Builder multiCIPConfidence(String multiCIPConfidence) {
            Utils.checkNotNull(multiCIPConfidence, "multiCIPConfidence");
            this.multiCIPConfidence = Optional.ofNullable(multiCIPConfidence);
            return this;
        }

        public Builder multiCIPConfidence(Optional<String> multiCIPConfidence) {
            Utils.checkNotNull(multiCIPConfidence, "multiCIPConfidence");
            this.multiCIPConfidence = multiCIPConfidence;
            return this;
        }
        
        public IDVDataInternal build() {
            return new IDVDataInternal(
                dataSource1,
                dataSource2,
                multiCIPConfidence);
        }
    }
}

