/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class V3VerifyRequest {

    /**
     * If true, the customer can re-enter the OTP pin up to three times. Code must also be implemented. See client-side SDK guide for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowOTPRetry")
    private Optional<Boolean> allowOTPRetry;

    /**
     * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Prove does not offer any functionality around the Client Customer ID. Do not include personally identifiable information (PII) in this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientCustomerId")
    private Optional<String> clientCustomerId;

    /**
     * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientRequestId")
    private Optional<String> clientRequestId;

    /**
     * The email address of the customer. Acceptable characters are: alphanumeric with symbols '@.+'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailAddress")
    private Optional<String> emailAddress;

    /**
     * The URL where the end user will be redirected at the end of the Instant Link flow. Required only when `flowType=desktop`. Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("finalTargetUrl")
    private Optional<String> finalTargetUrl;

    /**
     * The first name of the individual.
     */
    @JsonProperty("firstName")
    private String firstName;

    /**
     * The last name of the individual.
     */
    @JsonProperty("lastName")
    private String lastName;

    /**
     * The mobile phone number. US phone numbers can be passed in with or without a leading `+1`. International phone numbers require a leading `+1`. Use the appropriate endpoint URL based on the region the number originates from. Acceptable characters are: alphanumeric with symbols '+'.
     */
    @JsonProperty("phoneNumber")
    private String phoneNumber;

    /**
     * The type of device being user - either `desktop` for desktop web or `mobile` for iOS/Android native apps and mobile web.
     */
    @JsonProperty("possessionType")
    private String possessionType;

    /**
     * The message body sent in the Instant Link (`flowType=desktop`) or OTP (`flowType=mobile`) SMS message. If not provided, the following default messages will be used:
     * Instant Link: "Complete your verification. If you did not make this request, do not click the link. ####" The verification URL replaces ####.
     * OTP: "#### is your temporary code to continue your application. Caution: for your security, don't share this code with anyone." Use ####, #####, or ###### to generate 4-6 digit verification codes respectively.
     * Default language is English. Max length is 160 characters. Non-ASCII characters are allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smsMessage")
    private Optional<String> smsMessage;

    @JsonCreator
    public V3VerifyRequest(
            @JsonProperty("allowOTPRetry") Optional<Boolean> allowOTPRetry,
            @JsonProperty("clientCustomerId") Optional<String> clientCustomerId,
            @JsonProperty("clientRequestId") Optional<String> clientRequestId,
            @JsonProperty("emailAddress") Optional<String> emailAddress,
            @JsonProperty("finalTargetUrl") Optional<String> finalTargetUrl,
            @JsonProperty("firstName") String firstName,
            @JsonProperty("lastName") String lastName,
            @JsonProperty("phoneNumber") String phoneNumber,
            @JsonProperty("possessionType") String possessionType,
            @JsonProperty("smsMessage") Optional<String> smsMessage) {
        Utils.checkNotNull(allowOTPRetry, "allowOTPRetry");
        Utils.checkNotNull(clientCustomerId, "clientCustomerId");
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(possessionType, "possessionType");
        Utils.checkNotNull(smsMessage, "smsMessage");
        this.allowOTPRetry = allowOTPRetry;
        this.clientCustomerId = clientCustomerId;
        this.clientRequestId = clientRequestId;
        this.emailAddress = emailAddress;
        this.finalTargetUrl = finalTargetUrl;
        this.firstName = firstName;
        this.lastName = lastName;
        this.phoneNumber = phoneNumber;
        this.possessionType = possessionType;
        this.smsMessage = smsMessage;
    }
    
    public V3VerifyRequest(
            String firstName,
            String lastName,
            String phoneNumber,
            String possessionType) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), firstName, lastName, phoneNumber, possessionType, Optional.empty());
    }

    /**
     * If true, the customer can re-enter the OTP pin up to three times. Code must also be implemented. See client-side SDK guide for more details.
     */
    @JsonIgnore
    public Optional<Boolean> allowOTPRetry() {
        return allowOTPRetry;
    }

    /**
     * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Prove does not offer any functionality around the Client Customer ID. Do not include personally identifiable information (PII) in this field.
     */
    @JsonIgnore
    public Optional<String> clientCustomerId() {
        return clientCustomerId;
    }

    /**
     * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     */
    @JsonIgnore
    public Optional<String> clientRequestId() {
        return clientRequestId;
    }

    /**
     * The email address of the customer. Acceptable characters are: alphanumeric with symbols '@.+'.
     */
    @JsonIgnore
    public Optional<String> emailAddress() {
        return emailAddress;
    }

    /**
     * The URL where the end user will be redirected at the end of the Instant Link flow. Required only when `flowType=desktop`. Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
     */
    @JsonIgnore
    public Optional<String> finalTargetUrl() {
        return finalTargetUrl;
    }

    /**
     * The first name of the individual.
     */
    @JsonIgnore
    public String firstName() {
        return firstName;
    }

    /**
     * The last name of the individual.
     */
    @JsonIgnore
    public String lastName() {
        return lastName;
    }

    /**
     * The mobile phone number. US phone numbers can be passed in with or without a leading `+1`. International phone numbers require a leading `+1`. Use the appropriate endpoint URL based on the region the number originates from. Acceptable characters are: alphanumeric with symbols '+'.
     */
    @JsonIgnore
    public String phoneNumber() {
        return phoneNumber;
    }

    /**
     * The type of device being user - either `desktop` for desktop web or `mobile` for iOS/Android native apps and mobile web.
     */
    @JsonIgnore
    public String possessionType() {
        return possessionType;
    }

    /**
     * The message body sent in the Instant Link (`flowType=desktop`) or OTP (`flowType=mobile`) SMS message. If not provided, the following default messages will be used:
     * Instant Link: "Complete your verification. If you did not make this request, do not click the link. ####" The verification URL replaces ####.
     * OTP: "#### is your temporary code to continue your application. Caution: for your security, don't share this code with anyone." Use ####, #####, or ###### to generate 4-6 digit verification codes respectively.
     * Default language is English. Max length is 160 characters. Non-ASCII characters are allowed.
     */
    @JsonIgnore
    public Optional<String> smsMessage() {
        return smsMessage;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * If true, the customer can re-enter the OTP pin up to three times. Code must also be implemented. See client-side SDK guide for more details.
     */
    public V3VerifyRequest withAllowOTPRetry(boolean allowOTPRetry) {
        Utils.checkNotNull(allowOTPRetry, "allowOTPRetry");
        this.allowOTPRetry = Optional.ofNullable(allowOTPRetry);
        return this;
    }

    /**
     * If true, the customer can re-enter the OTP pin up to three times. Code must also be implemented. See client-side SDK guide for more details.
     */
    public V3VerifyRequest withAllowOTPRetry(Optional<Boolean> allowOTPRetry) {
        Utils.checkNotNull(allowOTPRetry, "allowOTPRetry");
        this.allowOTPRetry = allowOTPRetry;
        return this;
    }

    /**
     * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Prove does not offer any functionality around the Client Customer ID. Do not include personally identifiable information (PII) in this field.
     */
    public V3VerifyRequest withClientCustomerId(String clientCustomerId) {
        Utils.checkNotNull(clientCustomerId, "clientCustomerId");
        this.clientCustomerId = Optional.ofNullable(clientCustomerId);
        return this;
    }

    /**
     * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Prove does not offer any functionality around the Client Customer ID. Do not include personally identifiable information (PII) in this field.
     */
    public V3VerifyRequest withClientCustomerId(Optional<String> clientCustomerId) {
        Utils.checkNotNull(clientCustomerId, "clientCustomerId");
        this.clientCustomerId = clientCustomerId;
        return this;
    }

    /**
     * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     */
    public V3VerifyRequest withClientRequestId(String clientRequestId) {
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        this.clientRequestId = Optional.ofNullable(clientRequestId);
        return this;
    }

    /**
     * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     */
    public V3VerifyRequest withClientRequestId(Optional<String> clientRequestId) {
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        this.clientRequestId = clientRequestId;
        return this;
    }

    /**
     * The email address of the customer. Acceptable characters are: alphanumeric with symbols '@.+'.
     */
    public V3VerifyRequest withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = Optional.ofNullable(emailAddress);
        return this;
    }

    /**
     * The email address of the customer. Acceptable characters are: alphanumeric with symbols '@.+'.
     */
    public V3VerifyRequest withEmailAddress(Optional<String> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * The URL where the end user will be redirected at the end of the Instant Link flow. Required only when `flowType=desktop`. Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
     */
    public V3VerifyRequest withFinalTargetUrl(String finalTargetUrl) {
        Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
        this.finalTargetUrl = Optional.ofNullable(finalTargetUrl);
        return this;
    }

    /**
     * The URL where the end user will be redirected at the end of the Instant Link flow. Required only when `flowType=desktop`. Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
     */
    public V3VerifyRequest withFinalTargetUrl(Optional<String> finalTargetUrl) {
        Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
        this.finalTargetUrl = finalTargetUrl;
        return this;
    }

    /**
     * The first name of the individual.
     */
    public V3VerifyRequest withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name of the individual.
     */
    public V3VerifyRequest withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The mobile phone number. US phone numbers can be passed in with or without a leading `+1`. International phone numbers require a leading `+1`. Use the appropriate endpoint URL based on the region the number originates from. Acceptable characters are: alphanumeric with symbols '+'.
     */
    public V3VerifyRequest withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * The type of device being user - either `desktop` for desktop web or `mobile` for iOS/Android native apps and mobile web.
     */
    public V3VerifyRequest withPossessionType(String possessionType) {
        Utils.checkNotNull(possessionType, "possessionType");
        this.possessionType = possessionType;
        return this;
    }

    /**
     * The message body sent in the Instant Link (`flowType=desktop`) or OTP (`flowType=mobile`) SMS message. If not provided, the following default messages will be used:
     * Instant Link: "Complete your verification. If you did not make this request, do not click the link. ####" The verification URL replaces ####.
     * OTP: "#### is your temporary code to continue your application. Caution: for your security, don't share this code with anyone." Use ####, #####, or ###### to generate 4-6 digit verification codes respectively.
     * Default language is English. Max length is 160 characters. Non-ASCII characters are allowed.
     */
    public V3VerifyRequest withSmsMessage(String smsMessage) {
        Utils.checkNotNull(smsMessage, "smsMessage");
        this.smsMessage = Optional.ofNullable(smsMessage);
        return this;
    }

    /**
     * The message body sent in the Instant Link (`flowType=desktop`) or OTP (`flowType=mobile`) SMS message. If not provided, the following default messages will be used:
     * Instant Link: "Complete your verification. If you did not make this request, do not click the link. ####" The verification URL replaces ####.
     * OTP: "#### is your temporary code to continue your application. Caution: for your security, don't share this code with anyone." Use ####, #####, or ###### to generate 4-6 digit verification codes respectively.
     * Default language is English. Max length is 160 characters. Non-ASCII characters are allowed.
     */
    public V3VerifyRequest withSmsMessage(Optional<String> smsMessage) {
        Utils.checkNotNull(smsMessage, "smsMessage");
        this.smsMessage = smsMessage;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3VerifyRequest other = (V3VerifyRequest) o;
        return 
            Objects.deepEquals(this.allowOTPRetry, other.allowOTPRetry) &&
            Objects.deepEquals(this.clientCustomerId, other.clientCustomerId) &&
            Objects.deepEquals(this.clientRequestId, other.clientRequestId) &&
            Objects.deepEquals(this.emailAddress, other.emailAddress) &&
            Objects.deepEquals(this.finalTargetUrl, other.finalTargetUrl) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            Objects.deepEquals(this.possessionType, other.possessionType) &&
            Objects.deepEquals(this.smsMessage, other.smsMessage);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            allowOTPRetry,
            clientCustomerId,
            clientRequestId,
            emailAddress,
            finalTargetUrl,
            firstName,
            lastName,
            phoneNumber,
            possessionType,
            smsMessage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3VerifyRequest.class,
                "allowOTPRetry", allowOTPRetry,
                "clientCustomerId", clientCustomerId,
                "clientRequestId", clientRequestId,
                "emailAddress", emailAddress,
                "finalTargetUrl", finalTargetUrl,
                "firstName", firstName,
                "lastName", lastName,
                "phoneNumber", phoneNumber,
                "possessionType", possessionType,
                "smsMessage", smsMessage);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> allowOTPRetry = Optional.empty();
 
        private Optional<String> clientCustomerId = Optional.empty();
 
        private Optional<String> clientRequestId = Optional.empty();
 
        private Optional<String> emailAddress = Optional.empty();
 
        private Optional<String> finalTargetUrl = Optional.empty();
 
        private String firstName;
 
        private String lastName;
 
        private String phoneNumber;
 
        private String possessionType;
 
        private Optional<String> smsMessage = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * If true, the customer can re-enter the OTP pin up to three times. Code must also be implemented. See client-side SDK guide for more details.
         */
        public Builder allowOTPRetry(boolean allowOTPRetry) {
            Utils.checkNotNull(allowOTPRetry, "allowOTPRetry");
            this.allowOTPRetry = Optional.ofNullable(allowOTPRetry);
            return this;
        }

        /**
         * If true, the customer can re-enter the OTP pin up to three times. Code must also be implemented. See client-side SDK guide for more details.
         */
        public Builder allowOTPRetry(Optional<Boolean> allowOTPRetry) {
            Utils.checkNotNull(allowOTPRetry, "allowOTPRetry");
            this.allowOTPRetry = allowOTPRetry;
            return this;
        }

        /**
         * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Prove does not offer any functionality around the Client Customer ID. Do not include personally identifiable information (PII) in this field.
         */
        public Builder clientCustomerId(String clientCustomerId) {
            Utils.checkNotNull(clientCustomerId, "clientCustomerId");
            this.clientCustomerId = Optional.ofNullable(clientCustomerId);
            return this;
        }

        /**
         * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Prove does not offer any functionality around the Client Customer ID. Do not include personally identifiable information (PII) in this field.
         */
        public Builder clientCustomerId(Optional<String> clientCustomerId) {
            Utils.checkNotNull(clientCustomerId, "clientCustomerId");
            this.clientCustomerId = clientCustomerId;
            return this;
        }

        /**
         * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
         */
        public Builder clientRequestId(String clientRequestId) {
            Utils.checkNotNull(clientRequestId, "clientRequestId");
            this.clientRequestId = Optional.ofNullable(clientRequestId);
            return this;
        }

        /**
         * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
         */
        public Builder clientRequestId(Optional<String> clientRequestId) {
            Utils.checkNotNull(clientRequestId, "clientRequestId");
            this.clientRequestId = clientRequestId;
            return this;
        }

        /**
         * The email address of the customer. Acceptable characters are: alphanumeric with symbols '@.+'.
         */
        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = Optional.ofNullable(emailAddress);
            return this;
        }

        /**
         * The email address of the customer. Acceptable characters are: alphanumeric with symbols '@.+'.
         */
        public Builder emailAddress(Optional<String> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * The URL where the end user will be redirected at the end of the Instant Link flow. Required only when `flowType=desktop`. Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
         */
        public Builder finalTargetUrl(String finalTargetUrl) {
            Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
            this.finalTargetUrl = Optional.ofNullable(finalTargetUrl);
            return this;
        }

        /**
         * The URL where the end user will be redirected at the end of the Instant Link flow. Required only when `flowType=desktop`. Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
         */
        public Builder finalTargetUrl(Optional<String> finalTargetUrl) {
            Utils.checkNotNull(finalTargetUrl, "finalTargetUrl");
            this.finalTargetUrl = finalTargetUrl;
            return this;
        }

        /**
         * The first name of the individual.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The last name of the individual.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * The mobile phone number. US phone numbers can be passed in with or without a leading `+1`. International phone numbers require a leading `+1`. Use the appropriate endpoint URL based on the region the number originates from. Acceptable characters are: alphanumeric with symbols '+'.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * The type of device being user - either `desktop` for desktop web or `mobile` for iOS/Android native apps and mobile web.
         */
        public Builder possessionType(String possessionType) {
            Utils.checkNotNull(possessionType, "possessionType");
            this.possessionType = possessionType;
            return this;
        }

        /**
         * The message body sent in the Instant Link (`flowType=desktop`) or OTP (`flowType=mobile`) SMS message. If not provided, the following default messages will be used:
         * Instant Link: "Complete your verification. If you did not make this request, do not click the link. ####" The verification URL replaces ####.
         * OTP: "#### is your temporary code to continue your application. Caution: for your security, don't share this code with anyone." Use ####, #####, or ###### to generate 4-6 digit verification codes respectively.
         * Default language is English. Max length is 160 characters. Non-ASCII characters are allowed.
         */
        public Builder smsMessage(String smsMessage) {
            Utils.checkNotNull(smsMessage, "smsMessage");
            this.smsMessage = Optional.ofNullable(smsMessage);
            return this;
        }

        /**
         * The message body sent in the Instant Link (`flowType=desktop`) or OTP (`flowType=mobile`) SMS message. If not provided, the following default messages will be used:
         * Instant Link: "Complete your verification. If you did not make this request, do not click the link. ####" The verification URL replaces ####.
         * OTP: "#### is your temporary code to continue your application. Caution: for your security, don't share this code with anyone." Use ####, #####, or ###### to generate 4-6 digit verification codes respectively.
         * Default language is English. Max length is 160 characters. Non-ASCII characters are allowed.
         */
        public Builder smsMessage(Optional<String> smsMessage) {
            Utils.checkNotNull(smsMessage, "smsMessage");
            this.smsMessage = smsMessage;
            return this;
        }
        
        public V3VerifyRequest build() {
            return new V3VerifyRequest(
                allowOTPRetry,
                clientCustomerId,
                clientRequestId,
                emailAddress,
                finalTargetUrl,
                firstName,
                lastName,
                phoneNumber,
                possessionType,
                smsMessage);
        }
    }
}
