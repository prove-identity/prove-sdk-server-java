/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


@SuppressWarnings("serial")
public class Error401 extends RuntimeException {
    /**
     * An error code that describes the problem category of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<Long> code;

    /**
     * The error message describing the problem with the request.
     */
    @JsonProperty("message")
    private String message;

    @JsonCreator
    public Error401(
            @JsonProperty("code") Optional<Long> code,
            @JsonProperty("message") String message) {
        super("API error occurred");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(message, "message");
        this.code = code;
        this.message = message;
    }
    
    public Error401(
            String message) {
        this(Optional.empty(), message);
    }

    /**
     * An error code that describes the problem category of the request.
     */
    @JsonIgnore
    public Optional<Long> code() {
        return code;
    }

    /**
     * The error message describing the problem with the request.
     */
    @JsonIgnore
    public String message() {
        return message;
    }

    @JsonIgnore
    @Override
    public String getMessage() {
        return Utils.valueOrNull(message);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * An error code that describes the problem category of the request.
     */
    public Error401 withCode(long code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }


    /**
     * An error code that describes the problem category of the request.
     */
    public Error401 withCode(Optional<Long> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * The error message describing the problem with the request.
     */
    public Error401 withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Error401 other = (Error401) o;
        return 
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.message, other.message);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            code, message);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Error401.class,
                "code", code,
                "message", message);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Long> code = Optional.empty();

        private String message;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * An error code that describes the problem category of the request.
         */
        public Builder code(long code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        /**
         * An error code that describes the problem category of the request.
         */
        public Builder code(Optional<Long> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }


        /**
         * The error message describing the problem with the request.
         */
        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        public Error401 build() {

            return new Error401(
                code, message);
        }

    }
}

