/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.prove.proveapi.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

@SuppressWarnings("serial")
public class Error403 extends RuntimeException {

    /**
     * An internal error code that identifies the specific authorization issue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<Long> code;

    /**
     * An error message describing why access is forbidden.
     */
    @JsonProperty("message")
    private String message;

    @JsonCreator
    public Error403(
            @JsonProperty("code") Optional<Long> code,
            @JsonProperty("message") String message) {
        super(message);
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(message, "message");
        this.code = code;
        this.message = message;
    }
    
    public Error403(
            String message) {
        this(Optional.empty(), message);
    }

    /**
     * An internal error code that identifies the specific authorization issue.
     */
    @JsonIgnore
    public Optional<Long> code() {
        return code;
    }

    /**
     * An error message describing why access is forbidden.
     */
    @JsonIgnore
    public String message() {
        return message;
    }

    @JsonIgnore
    @Override
    public String getMessage() {
        return Utils.valueOrNull(message);
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * An internal error code that identifies the specific authorization issue.
     */
    public Error403 withCode(long code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    /**
     * An internal error code that identifies the specific authorization issue.
     */
    public Error403 withCode(Optional<Long> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * An error message describing why access is forbidden.
     */
    public Error403 withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Error403 other = (Error403) o;
        return 
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.message, other.message);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            code,
            message);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Error403.class,
                "code", code,
                "message", message);
    }
    
    public final static class Builder {
 
        private Optional<Long> code = Optional.empty();
 
        private String message;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An internal error code that identifies the specific authorization issue.
         */
        public Builder code(long code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        /**
         * An internal error code that identifies the specific authorization issue.
         */
        public Builder code(Optional<Long> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        /**
         * An error message describing why access is forbidden.
         */
        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }
        
        public Error403 build() {
            return new Error403(
                code,
                message);
        }
    }
}

