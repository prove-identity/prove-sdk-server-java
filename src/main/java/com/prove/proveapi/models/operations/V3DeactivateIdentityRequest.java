/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.prove.proveapi.models.components.V3IdentityDeactivateRequest;
import com.prove.proveapi.utils.SpeakeasyMetadata;
import com.prove.proveapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class V3DeactivateIdentityRequest {

    /**
     * A Prove-generated unique ID for a specific identity.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=identityId")
    private String identityId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends V3IdentityDeactivateRequest> v3IdentityDeactivateRequest;

    @JsonCreator
    public V3DeactivateIdentityRequest(
            String identityId,
            Optional<? extends V3IdentityDeactivateRequest> v3IdentityDeactivateRequest) {
        Utils.checkNotNull(identityId, "identityId");
        Utils.checkNotNull(v3IdentityDeactivateRequest, "v3IdentityDeactivateRequest");
        this.identityId = identityId;
        this.v3IdentityDeactivateRequest = v3IdentityDeactivateRequest;
    }
    
    public V3DeactivateIdentityRequest(
            String identityId) {
        this(identityId, Optional.empty());
    }

    /**
     * A Prove-generated unique ID for a specific identity.
     */
    @JsonIgnore
    public String identityId() {
        return identityId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<V3IdentityDeactivateRequest> v3IdentityDeactivateRequest() {
        return (Optional<V3IdentityDeactivateRequest>) v3IdentityDeactivateRequest;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A Prove-generated unique ID for a specific identity.
     */
    public V3DeactivateIdentityRequest withIdentityId(String identityId) {
        Utils.checkNotNull(identityId, "identityId");
        this.identityId = identityId;
        return this;
    }

    public V3DeactivateIdentityRequest withV3IdentityDeactivateRequest(V3IdentityDeactivateRequest v3IdentityDeactivateRequest) {
        Utils.checkNotNull(v3IdentityDeactivateRequest, "v3IdentityDeactivateRequest");
        this.v3IdentityDeactivateRequest = Optional.ofNullable(v3IdentityDeactivateRequest);
        return this;
    }

    public V3DeactivateIdentityRequest withV3IdentityDeactivateRequest(Optional<? extends V3IdentityDeactivateRequest> v3IdentityDeactivateRequest) {
        Utils.checkNotNull(v3IdentityDeactivateRequest, "v3IdentityDeactivateRequest");
        this.v3IdentityDeactivateRequest = v3IdentityDeactivateRequest;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3DeactivateIdentityRequest other = (V3DeactivateIdentityRequest) o;
        return 
            Objects.deepEquals(this.identityId, other.identityId) &&
            Objects.deepEquals(this.v3IdentityDeactivateRequest, other.v3IdentityDeactivateRequest);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            identityId,
            v3IdentityDeactivateRequest);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3DeactivateIdentityRequest.class,
                "identityId", identityId,
                "v3IdentityDeactivateRequest", v3IdentityDeactivateRequest);
    }
    
    public final static class Builder {
 
        private String identityId;
 
        private Optional<? extends V3IdentityDeactivateRequest> v3IdentityDeactivateRequest = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A Prove-generated unique ID for a specific identity.
         */
        public Builder identityId(String identityId) {
            Utils.checkNotNull(identityId, "identityId");
            this.identityId = identityId;
            return this;
        }

        public Builder v3IdentityDeactivateRequest(V3IdentityDeactivateRequest v3IdentityDeactivateRequest) {
            Utils.checkNotNull(v3IdentityDeactivateRequest, "v3IdentityDeactivateRequest");
            this.v3IdentityDeactivateRequest = Optional.ofNullable(v3IdentityDeactivateRequest);
            return this;
        }

        public Builder v3IdentityDeactivateRequest(Optional<? extends V3IdentityDeactivateRequest> v3IdentityDeactivateRequest) {
            Utils.checkNotNull(v3IdentityDeactivateRequest, "v3IdentityDeactivateRequest");
            this.v3IdentityDeactivateRequest = v3IdentityDeactivateRequest;
            return this;
        }
        
        public V3DeactivateIdentityRequest build() {
            return new V3DeactivateIdentityRequest(
                identityId,
                v3IdentityDeactivateRequest);
        }
    }
}
