/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.prove.proveapi.utils.SpeakeasyMetadata;
import com.prove.proveapi.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class V3BatchGetIdentitiesRequest {
    /**
     * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=clientRequestId")
    private Optional<String> clientRequestId;

    /**
     * The maximum number of identities to return per call. Default value is 100.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Long> limit;

    /**
     * The pagination token for the GET /v3/identity API. Use this to retrieve the next page of results after a previous call to GET /v3/identity. This token is returned as lastKey in the GET /v3/identity API response - pass it in directly as startKey to get the next page of results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=startKey")
    private Optional<String> startKey;

    /**
     * Whether to show identities associated with the current client that are currently marked as inactive. Default value is false.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=showInactive")
    private Optional<Boolean> showInactive;

    @JsonCreator
    public V3BatchGetIdentitiesRequest(
            Optional<String> clientRequestId,
            Optional<Long> limit,
            Optional<String> startKey,
            Optional<Boolean> showInactive) {
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(startKey, "startKey");
        Utils.checkNotNull(showInactive, "showInactive");
        this.clientRequestId = clientRequestId;
        this.limit = limit;
        this.startKey = startKey;
        this.showInactive = showInactive;
    }
    
    public V3BatchGetIdentitiesRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     */
    @JsonIgnore
    public Optional<String> clientRequestId() {
        return clientRequestId;
    }

    /**
     * The maximum number of identities to return per call. Default value is 100.
     */
    @JsonIgnore
    public Optional<Long> limit() {
        return limit;
    }

    /**
     * The pagination token for the GET /v3/identity API. Use this to retrieve the next page of results after a previous call to GET /v3/identity. This token is returned as lastKey in the GET /v3/identity API response - pass it in directly as startKey to get the next page of results.
     */
    @JsonIgnore
    public Optional<String> startKey() {
        return startKey;
    }

    /**
     * Whether to show identities associated with the current client that are currently marked as inactive. Default value is false.
     */
    @JsonIgnore
    public Optional<Boolean> showInactive() {
        return showInactive;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     */
    public V3BatchGetIdentitiesRequest withClientRequestId(String clientRequestId) {
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        this.clientRequestId = Optional.ofNullable(clientRequestId);
        return this;
    }


    /**
     * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     */
    public V3BatchGetIdentitiesRequest withClientRequestId(Optional<String> clientRequestId) {
        Utils.checkNotNull(clientRequestId, "clientRequestId");
        this.clientRequestId = clientRequestId;
        return this;
    }

    /**
     * The maximum number of identities to return per call. Default value is 100.
     */
    public V3BatchGetIdentitiesRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }


    /**
     * The maximum number of identities to return per call. Default value is 100.
     */
    public V3BatchGetIdentitiesRequest withLimit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * The pagination token for the GET /v3/identity API. Use this to retrieve the next page of results after a previous call to GET /v3/identity. This token is returned as lastKey in the GET /v3/identity API response - pass it in directly as startKey to get the next page of results.
     */
    public V3BatchGetIdentitiesRequest withStartKey(String startKey) {
        Utils.checkNotNull(startKey, "startKey");
        this.startKey = Optional.ofNullable(startKey);
        return this;
    }


    /**
     * The pagination token for the GET /v3/identity API. Use this to retrieve the next page of results after a previous call to GET /v3/identity. This token is returned as lastKey in the GET /v3/identity API response - pass it in directly as startKey to get the next page of results.
     */
    public V3BatchGetIdentitiesRequest withStartKey(Optional<String> startKey) {
        Utils.checkNotNull(startKey, "startKey");
        this.startKey = startKey;
        return this;
    }

    /**
     * Whether to show identities associated with the current client that are currently marked as inactive. Default value is false.
     */
    public V3BatchGetIdentitiesRequest withShowInactive(boolean showInactive) {
        Utils.checkNotNull(showInactive, "showInactive");
        this.showInactive = Optional.ofNullable(showInactive);
        return this;
    }


    /**
     * Whether to show identities associated with the current client that are currently marked as inactive. Default value is false.
     */
    public V3BatchGetIdentitiesRequest withShowInactive(Optional<Boolean> showInactive) {
        Utils.checkNotNull(showInactive, "showInactive");
        this.showInactive = showInactive;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3BatchGetIdentitiesRequest other = (V3BatchGetIdentitiesRequest) o;
        return 
            Utils.enhancedDeepEquals(this.clientRequestId, other.clientRequestId) &&
            Utils.enhancedDeepEquals(this.limit, other.limit) &&
            Utils.enhancedDeepEquals(this.startKey, other.startKey) &&
            Utils.enhancedDeepEquals(this.showInactive, other.showInactive);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            clientRequestId, limit, startKey,
            showInactive);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3BatchGetIdentitiesRequest.class,
                "clientRequestId", clientRequestId,
                "limit", limit,
                "startKey", startKey,
                "showInactive", showInactive);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> clientRequestId = Optional.empty();

        private Optional<Long> limit = Optional.empty();

        private Optional<String> startKey = Optional.empty();

        private Optional<Boolean> showInactive = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
         */
        public Builder clientRequestId(String clientRequestId) {
            Utils.checkNotNull(clientRequestId, "clientRequestId");
            this.clientRequestId = Optional.ofNullable(clientRequestId);
            return this;
        }

        /**
         * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
         */
        public Builder clientRequestId(Optional<String> clientRequestId) {
            Utils.checkNotNull(clientRequestId, "clientRequestId");
            this.clientRequestId = clientRequestId;
            return this;
        }


        /**
         * The maximum number of identities to return per call. Default value is 100.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * The maximum number of identities to return per call. Default value is 100.
         */
        public Builder limit(Optional<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }


        /**
         * The pagination token for the GET /v3/identity API. Use this to retrieve the next page of results after a previous call to GET /v3/identity. This token is returned as lastKey in the GET /v3/identity API response - pass it in directly as startKey to get the next page of results.
         */
        public Builder startKey(String startKey) {
            Utils.checkNotNull(startKey, "startKey");
            this.startKey = Optional.ofNullable(startKey);
            return this;
        }

        /**
         * The pagination token for the GET /v3/identity API. Use this to retrieve the next page of results after a previous call to GET /v3/identity. This token is returned as lastKey in the GET /v3/identity API response - pass it in directly as startKey to get the next page of results.
         */
        public Builder startKey(Optional<String> startKey) {
            Utils.checkNotNull(startKey, "startKey");
            this.startKey = startKey;
            return this;
        }


        /**
         * Whether to show identities associated with the current client that are currently marked as inactive. Default value is false.
         */
        public Builder showInactive(boolean showInactive) {
            Utils.checkNotNull(showInactive, "showInactive");
            this.showInactive = Optional.ofNullable(showInactive);
            return this;
        }

        /**
         * Whether to show identities associated with the current client that are currently marked as inactive. Default value is false.
         */
        public Builder showInactive(Optional<Boolean> showInactive) {
            Utils.checkNotNull(showInactive, "showInactive");
            this.showInactive = showInactive;
            return this;
        }

        public V3BatchGetIdentitiesRequest build() {

            return new V3BatchGetIdentitiesRequest(
                clientRequestId, limit, startKey,
                showInactive);
        }

    }
}
