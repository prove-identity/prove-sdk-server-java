/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi;

import static com.prove.proveapi.operations.Operations.RequestOperation;

import com.prove.proveapi.models.components.V3ChallengeRequest;
import com.prove.proveapi.models.components.V3CompleteRequest;
import com.prove.proveapi.models.components.V3StartRequest;
import com.prove.proveapi.models.components.V3TokenRequest;
import com.prove.proveapi.models.components.V3UnifyBindRequest;
import com.prove.proveapi.models.components.V3UnifyRequest;
import com.prove.proveapi.models.components.V3UnifyStatusRequest;
import com.prove.proveapi.models.components.V3ValidateRequest;
import com.prove.proveapi.models.components.V3VerifyRequest;
import com.prove.proveapi.models.components.V3VerifyStatusRequest;
import com.prove.proveapi.models.operations.V3ChallengeRequestRequestBuilder;
import com.prove.proveapi.models.operations.V3ChallengeRequestResponse;
import com.prove.proveapi.models.operations.V3CompleteRequestRequestBuilder;
import com.prove.proveapi.models.operations.V3CompleteRequestResponse;
import com.prove.proveapi.models.operations.V3StartRequestRequestBuilder;
import com.prove.proveapi.models.operations.V3StartRequestResponse;
import com.prove.proveapi.models.operations.V3TokenRequestRequestBuilder;
import com.prove.proveapi.models.operations.V3TokenRequestResponse;
import com.prove.proveapi.models.operations.V3UnifyBindRequestRequestBuilder;
import com.prove.proveapi.models.operations.V3UnifyBindRequestResponse;
import com.prove.proveapi.models.operations.V3UnifyRequestRequestBuilder;
import com.prove.proveapi.models.operations.V3UnifyRequestResponse;
import com.prove.proveapi.models.operations.V3UnifyStatusRequestRequestBuilder;
import com.prove.proveapi.models.operations.V3UnifyStatusRequestResponse;
import com.prove.proveapi.models.operations.V3ValidateRequestRequestBuilder;
import com.prove.proveapi.models.operations.V3ValidateRequestResponse;
import com.prove.proveapi.models.operations.V3VerifyRequestRequestBuilder;
import com.prove.proveapi.models.operations.V3VerifyRequestResponse;
import com.prove.proveapi.models.operations.V3VerifyStatusRequestRequestBuilder;
import com.prove.proveapi.models.operations.V3VerifyStatusRequestResponse;
import com.prove.proveapi.operations.V3ChallengeRequestOperation;
import com.prove.proveapi.operations.V3CompleteRequestOperation;
import com.prove.proveapi.operations.V3StartRequestOperation;
import com.prove.proveapi.operations.V3TokenRequestOperation;
import com.prove.proveapi.operations.V3UnifyBindRequestOperation;
import com.prove.proveapi.operations.V3UnifyRequestOperation;
import com.prove.proveapi.operations.V3UnifyStatusRequestOperation;
import com.prove.proveapi.operations.V3ValidateRequestOperation;
import com.prove.proveapi.operations.V3VerifyRequestOperation;
import com.prove.proveapi.operations.V3VerifyStatusRequestOperation;
import java.lang.Exception;
import java.util.Optional;


public class V3 {
    private final SDKConfiguration sdkConfiguration;

    V3(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Request OAuth Token
     * 
     * <p>This endpoint allows you to request an OAuth token.
     * 
     * @return The call builder
     */
    public V3TokenRequestRequestBuilder v3TokenRequest() {
        return new V3TokenRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Request OAuth Token
     * 
     * <p>This endpoint allows you to request an OAuth token.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3TokenRequestResponse v3TokenRequestDirect() throws Exception {
        return v3TokenRequest(Optional.empty());
    }

    /**
     * Request OAuth Token
     * 
     * <p>This endpoint allows you to request an OAuth token.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3TokenRequestResponse v3TokenRequest(Optional<? extends V3TokenRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3TokenRequest>, V3TokenRequestResponse> operation
              = new V3TokenRequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Submit Challenge
     * 
     * <p>This endpoint allows you to submit challenge information.
     * 
     * @return The call builder
     */
    public V3ChallengeRequestRequestBuilder v3ChallengeRequest() {
        return new V3ChallengeRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Submit Challenge
     * 
     * <p>This endpoint allows you to submit challenge information.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ChallengeRequestResponse v3ChallengeRequestDirect() throws Exception {
        return v3ChallengeRequest(Optional.empty());
    }

    /**
     * Submit Challenge
     * 
     * <p>This endpoint allows you to submit challenge information.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ChallengeRequestResponse v3ChallengeRequest(Optional<? extends V3ChallengeRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3ChallengeRequest>, V3ChallengeRequestResponse> operation
              = new V3ChallengeRequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Complete Flow
     * 
     * <p>This endpoint allows you to verify the user and complete the flow.
     * 
     * @return The call builder
     */
    public V3CompleteRequestRequestBuilder v3CompleteRequest() {
        return new V3CompleteRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Complete Flow
     * 
     * <p>This endpoint allows you to verify the user and complete the flow.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3CompleteRequestResponse v3CompleteRequestDirect() throws Exception {
        return v3CompleteRequest(Optional.empty());
    }

    /**
     * Complete Flow
     * 
     * <p>This endpoint allows you to verify the user and complete the flow.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3CompleteRequestResponse v3CompleteRequest(Optional<? extends V3CompleteRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3CompleteRequest>, V3CompleteRequestResponse> operation
              = new V3CompleteRequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Start Flow
     * 
     * <p>This endpoint allows you to start the solution flow.
     * 
     * @return The call builder
     */
    public V3StartRequestRequestBuilder v3StartRequest() {
        return new V3StartRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Start Flow
     * 
     * <p>This endpoint allows you to start the solution flow.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3StartRequestResponse v3StartRequestDirect() throws Exception {
        return v3StartRequest(Optional.empty());
    }

    /**
     * Start Flow
     * 
     * <p>This endpoint allows you to start the solution flow.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3StartRequestResponse v3StartRequest(Optional<? extends V3StartRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3StartRequest>, V3StartRequestResponse> operation
              = new V3StartRequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Initiate Possession Check
     * 
     * <p>This endpoint allows you to initiate the possession check.
     * 
     * @return The call builder
     */
    public V3UnifyRequestRequestBuilder v3UnifyRequest() {
        return new V3UnifyRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Initiate Possession Check
     * 
     * <p>This endpoint allows you to initiate the possession check.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3UnifyRequestResponse v3UnifyRequestDirect() throws Exception {
        return v3UnifyRequest(Optional.empty());
    }

    /**
     * Initiate Possession Check
     * 
     * <p>This endpoint allows you to initiate the possession check.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3UnifyRequestResponse v3UnifyRequest(Optional<? extends V3UnifyRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3UnifyRequest>, V3UnifyRequestResponse> operation
              = new V3UnifyRequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Bind Prove Key
     * 
     * <p>This endpoint allows you to bind a Prove Key to a phone number of a Unify session and get the possession result.
     * 
     * @return The call builder
     */
    public V3UnifyBindRequestRequestBuilder v3UnifyBindRequest() {
        return new V3UnifyBindRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Bind Prove Key
     * 
     * <p>This endpoint allows you to bind a Prove Key to a phone number of a Unify session and get the possession result.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3UnifyBindRequestResponse v3UnifyBindRequestDirect() throws Exception {
        return v3UnifyBindRequest(Optional.empty());
    }

    /**
     * Bind Prove Key
     * 
     * <p>This endpoint allows you to bind a Prove Key to a phone number of a Unify session and get the possession result.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3UnifyBindRequestResponse v3UnifyBindRequest(Optional<? extends V3UnifyBindRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3UnifyBindRequest>, V3UnifyBindRequestResponse> operation
              = new V3UnifyBindRequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Check Status
     * 
     * <p>This endpoint allows you to check the status of a Unify session and get the possession result.
     * 
     * @return The call builder
     */
    public V3UnifyStatusRequestRequestBuilder v3UnifyStatusRequest() {
        return new V3UnifyStatusRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Check Status
     * 
     * <p>This endpoint allows you to check the status of a Unify session and get the possession result.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3UnifyStatusRequestResponse v3UnifyStatusRequestDirect() throws Exception {
        return v3UnifyStatusRequest(Optional.empty());
    }

    /**
     * Check Status
     * 
     * <p>This endpoint allows you to check the status of a Unify session and get the possession result.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3UnifyStatusRequestResponse v3UnifyStatusRequest(Optional<? extends V3UnifyStatusRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3UnifyStatusRequest>, V3UnifyStatusRequestResponse> operation
              = new V3UnifyStatusRequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Validate Phone Number
     * 
     * <p>This endpoint allows you to check if the phone number entered/discovered earlier in the flow is validated.
     * 
     * @return The call builder
     */
    public V3ValidateRequestRequestBuilder v3ValidateRequest() {
        return new V3ValidateRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Validate Phone Number
     * 
     * <p>This endpoint allows you to check if the phone number entered/discovered earlier in the flow is validated.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ValidateRequestResponse v3ValidateRequestDirect() throws Exception {
        return v3ValidateRequest(Optional.empty());
    }

    /**
     * Validate Phone Number
     * 
     * <p>This endpoint allows you to check if the phone number entered/discovered earlier in the flow is validated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ValidateRequestResponse v3ValidateRequest(Optional<? extends V3ValidateRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3ValidateRequest>, V3ValidateRequestResponse> operation
              = new V3ValidateRequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Initiate Verified Users Session
     * 
     * <p>This endpoint allows you to initiate a Verified Users session.
     * 
     * @return The call builder
     */
    public V3VerifyRequestRequestBuilder v3VerifyRequest() {
        return new V3VerifyRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Initiate Verified Users Session
     * 
     * <p>This endpoint allows you to initiate a Verified Users session.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3VerifyRequestResponse v3VerifyRequestDirect() throws Exception {
        return v3VerifyRequest(Optional.empty());
    }

    /**
     * Initiate Verified Users Session
     * 
     * <p>This endpoint allows you to initiate a Verified Users session.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3VerifyRequestResponse v3VerifyRequest(Optional<? extends V3VerifyRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3VerifyRequest>, V3VerifyRequestResponse> operation
              = new V3VerifyRequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Check Verification Result
     * 
     * <p>This endpoint allows you to perform the necessary checks for a Verified Users session.
     * 
     * @return The call builder
     */
    public V3VerifyStatusRequestRequestBuilder v3VerifyStatusRequest() {
        return new V3VerifyStatusRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Check Verification Result
     * 
     * <p>This endpoint allows you to perform the necessary checks for a Verified Users session.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3VerifyStatusRequestResponse v3VerifyStatusRequestDirect() throws Exception {
        return v3VerifyStatusRequest(Optional.empty());
    }

    /**
     * Check Verification Result
     * 
     * <p>This endpoint allows you to perform the necessary checks for a Verified Users session.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3VerifyStatusRequestResponse v3VerifyStatusRequest(Optional<? extends V3VerifyStatusRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3VerifyStatusRequest>, V3VerifyStatusRequestResponse> operation
              = new V3VerifyStatusRequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
