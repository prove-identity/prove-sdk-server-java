/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.prove.proveapi;

import static com.prove.proveapi.operations.Operations.RequestOperation;

import com.prove.proveapi.models.components.V3ActivateIdentityRequest;
import com.prove.proveapi.models.components.V3BatchEnrollIdentitiesRequest;
import com.prove.proveapi.models.components.V3CrossDomainIdentityRequest;
import com.prove.proveapi.models.components.V3EnrollIdentityRequest;
import com.prove.proveapi.models.components.V3IdentityDeactivateRequest;
import com.prove.proveapi.models.operations.V3ActivateIdentityRequestBuilder;
import com.prove.proveapi.models.operations.V3ActivateIdentityResponse;
import com.prove.proveapi.models.operations.V3BatchEnrollIdentitiesRequestBuilder;
import com.prove.proveapi.models.operations.V3BatchEnrollIdentitiesResponse;
import com.prove.proveapi.models.operations.V3BatchGetIdentitiesRequest;
import com.prove.proveapi.models.operations.V3BatchGetIdentitiesRequestBuilder;
import com.prove.proveapi.models.operations.V3BatchGetIdentitiesResponse;
import com.prove.proveapi.models.operations.V3CrossDomainIdentityRequestBuilder;
import com.prove.proveapi.models.operations.V3CrossDomainIdentityResponse;
import com.prove.proveapi.models.operations.V3DeactivateIdentityRequest;
import com.prove.proveapi.models.operations.V3DeactivateIdentityRequestBuilder;
import com.prove.proveapi.models.operations.V3DeactivateIdentityResponse;
import com.prove.proveapi.models.operations.V3DisenrollIdentityRequest;
import com.prove.proveapi.models.operations.V3DisenrollIdentityRequestBuilder;
import com.prove.proveapi.models.operations.V3DisenrollIdentityResponse;
import com.prove.proveapi.models.operations.V3EnrollIdentityRequestBuilder;
import com.prove.proveapi.models.operations.V3EnrollIdentityResponse;
import com.prove.proveapi.models.operations.V3GetIdentitiesByPhoneNumberRequest;
import com.prove.proveapi.models.operations.V3GetIdentitiesByPhoneNumberRequestBuilder;
import com.prove.proveapi.models.operations.V3GetIdentitiesByPhoneNumberResponse;
import com.prove.proveapi.models.operations.V3GetIdentityRequest;
import com.prove.proveapi.models.operations.V3GetIdentityRequestBuilder;
import com.prove.proveapi.models.operations.V3GetIdentityResponse;
import com.prove.proveapi.operations.V3ActivateIdentity;
import com.prove.proveapi.operations.V3BatchEnrollIdentities;
import com.prove.proveapi.operations.V3BatchGetIdentities;
import com.prove.proveapi.operations.V3CrossDomainIdentity;
import com.prove.proveapi.operations.V3DeactivateIdentity;
import com.prove.proveapi.operations.V3DisenrollIdentity;
import com.prove.proveapi.operations.V3EnrollIdentity;
import com.prove.proveapi.operations.V3GetIdentitiesByPhoneNumber;
import com.prove.proveapi.operations.V3GetIdentity;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;


public class Identity {
    private final SDKConfiguration sdkConfiguration;

    Identity(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Batch Get Identities
     * 
     * <p>Return a list of all identities you have enrolled in Identity Manager.
     * 
     * @return The call builder
     */
    public V3BatchGetIdentitiesRequestBuilder v3BatchGetIdentities() {
        return new V3BatchGetIdentitiesRequestBuilder(sdkConfiguration);
    }

    /**
     * Batch Get Identities
     * 
     * <p>Return a list of all identities you have enrolled in Identity Manager.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3BatchGetIdentitiesResponse v3BatchGetIdentitiesDirect() throws Exception {
        return v3BatchGetIdentities(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Batch Get Identities
     * 
     * <p>Return a list of all identities you have enrolled in Identity Manager.
     * 
     * @param clientRequestId A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     * @param limit The maximum number of identities to return per call. Default value is 100.
     * @param startKey The pagination token for the GET /v3/identity API. Use this to retrieve the next page of results after a previous call to GET /v3/identity. This token is returned as lastKey in the GET /v3/identity API response - pass it in directly as startKey to get the next page of results.
     * @param showInactive Whether to show identities associated with the current client that are currently marked as inactive. Default value is false.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3BatchGetIdentitiesResponse v3BatchGetIdentities(
            Optional<String> clientRequestId, Optional<Long> limit,
            Optional<String> startKey, Optional<Boolean> showInactive) throws Exception {
        V3BatchGetIdentitiesRequest request =
            V3BatchGetIdentitiesRequest
                .builder()
                .clientRequestId(clientRequestId)
                .limit(limit)
                .startKey(startKey)
                .showInactive(showInactive)
                .build();
        RequestOperation<V3BatchGetIdentitiesRequest, V3BatchGetIdentitiesResponse> operation
              = new V3BatchGetIdentities.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Enroll Identity
     * 
     * <p>Enrolls a single customer for monitoring using their phone number and unique identifier.
     * 
     * @return The call builder
     */
    public V3EnrollIdentityRequestBuilder v3EnrollIdentity() {
        return new V3EnrollIdentityRequestBuilder(sdkConfiguration);
    }

    /**
     * Enroll Identity
     * 
     * <p>Enrolls a single customer for monitoring using their phone number and unique identifier.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3EnrollIdentityResponse v3EnrollIdentityDirect() throws Exception {
        return v3EnrollIdentity(Optional.empty());
    }

    /**
     * Enroll Identity
     * 
     * <p>Enrolls a single customer for monitoring using their phone number and unique identifier.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3EnrollIdentityResponse v3EnrollIdentity(Optional<? extends V3EnrollIdentityRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3EnrollIdentityRequest>, V3EnrollIdentityResponse> operation
              = new V3EnrollIdentity.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Batch Enroll Identities
     * 
     * <p>Enrolls multiple customers in a single request for efficient bulk operations (up to 100).
     * 
     * @return The call builder
     */
    public V3BatchEnrollIdentitiesRequestBuilder v3BatchEnrollIdentities() {
        return new V3BatchEnrollIdentitiesRequestBuilder(sdkConfiguration);
    }

    /**
     * Batch Enroll Identities
     * 
     * <p>Enrolls multiple customers in a single request for efficient bulk operations (up to 100).
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3BatchEnrollIdentitiesResponse v3BatchEnrollIdentitiesDirect() throws Exception {
        return v3BatchEnrollIdentities(Optional.empty());
    }

    /**
     * Batch Enroll Identities
     * 
     * <p>Enrolls multiple customers in a single request for efficient bulk operations (up to 100).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3BatchEnrollIdentitiesResponse v3BatchEnrollIdentities(Optional<? extends V3BatchEnrollIdentitiesRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3BatchEnrollIdentitiesRequest>, V3BatchEnrollIdentitiesResponse> operation
              = new V3BatchEnrollIdentities.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Disenroll Identity
     * 
     * <p>Disenrolls an identity from Identity Manager. If you wish to monitor in future, re-enrollment of that identity is required.
     * 
     * @return The call builder
     */
    public V3DisenrollIdentityRequestBuilder v3DisenrollIdentity() {
        return new V3DisenrollIdentityRequestBuilder(sdkConfiguration);
    }

    /**
     * Disenroll Identity
     * 
     * <p>Disenrolls an identity from Identity Manager. If you wish to monitor in future, re-enrollment of that identity is required.
     * 
     * @param identityId A Prove-generated unique ID for a specific identity.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DisenrollIdentityResponse v3DisenrollIdentity(String identityId) throws Exception {
        return v3DisenrollIdentity(identityId, Optional.empty());
    }

    /**
     * Disenroll Identity
     * 
     * <p>Disenrolls an identity from Identity Manager. If you wish to monitor in future, re-enrollment of that identity is required.
     * 
     * @param identityId A Prove-generated unique ID for a specific identity.
     * @param clientRequestId A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DisenrollIdentityResponse v3DisenrollIdentity(String identityId, Optional<String> clientRequestId) throws Exception {
        V3DisenrollIdentityRequest request =
            V3DisenrollIdentityRequest
                .builder()
                .identityId(identityId)
                .clientRequestId(clientRequestId)
                .build();
        RequestOperation<V3DisenrollIdentityRequest, V3DisenrollIdentityResponse> operation
              = new V3DisenrollIdentity.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Identity
     * 
     * <p>Return details of an identity given the identity ID.
     * 
     * @return The call builder
     */
    public V3GetIdentityRequestBuilder v3GetIdentity() {
        return new V3GetIdentityRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Identity
     * 
     * <p>Return details of an identity given the identity ID.
     * 
     * @param identityId A unique Prove-generated identifier for the enrolled identity.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetIdentityResponse v3GetIdentity(String identityId) throws Exception {
        return v3GetIdentity(identityId, Optional.empty());
    }

    /**
     * Get Identity
     * 
     * <p>Return details of an identity given the identity ID.
     * 
     * @param identityId A unique Prove-generated identifier for the enrolled identity.
     * @param clientRequestId A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetIdentityResponse v3GetIdentity(String identityId, Optional<String> clientRequestId) throws Exception {
        V3GetIdentityRequest request =
            V3GetIdentityRequest
                .builder()
                .identityId(identityId)
                .clientRequestId(clientRequestId)
                .build();
        RequestOperation<V3GetIdentityRequest, V3GetIdentityResponse> operation
              = new V3GetIdentity.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Activate Identity
     * 
     * <p>Sets an identity as active for monitoring.
     * 
     * @return The call builder
     */
    public V3ActivateIdentityRequestBuilder v3ActivateIdentity() {
        return new V3ActivateIdentityRequestBuilder(sdkConfiguration);
    }

    /**
     * Activate Identity
     * 
     * <p>Sets an identity as active for monitoring.
     * 
     * @param identityId A Prove-generated unique ID for a specific identity.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ActivateIdentityResponse v3ActivateIdentity(String identityId) throws Exception {
        return v3ActivateIdentity(identityId, Optional.empty());
    }

    /**
     * Activate Identity
     * 
     * <p>Sets an identity as active for monitoring.
     * 
     * @param identityId A Prove-generated unique ID for a specific identity.
     * @param v3ActivateIdentityRequest Request body for the V3 Activate Identity API.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ActivateIdentityResponse v3ActivateIdentity(String identityId, Optional<? extends V3ActivateIdentityRequest> v3ActivateIdentityRequest) throws Exception {
        com.prove.proveapi.models.operations.V3ActivateIdentityRequest request =
            com.prove.proveapi.models.operations.V3ActivateIdentityRequest
                .builder()
                .identityId(identityId)
                .v3ActivateIdentityRequest(v3ActivateIdentityRequest)
                .build();
        RequestOperation<com.prove.proveapi.models.operations.V3ActivateIdentityRequest, V3ActivateIdentityResponse> operation
              = new V3ActivateIdentity.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Cross Domain Identity
     * 
     * <p>Retreives the list of identities from other linked accounts.
     * 
     * @return The call builder
     */
    public V3CrossDomainIdentityRequestBuilder v3CrossDomainIdentity() {
        return new V3CrossDomainIdentityRequestBuilder(sdkConfiguration);
    }

    /**
     * Cross Domain Identity
     * 
     * <p>Retreives the list of identities from other linked accounts.
     * 
     * @param identityId A Prove-generated unique ID for a specific identity.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3CrossDomainIdentityResponse v3CrossDomainIdentity(String identityId) throws Exception {
        return v3CrossDomainIdentity(identityId, Optional.empty());
    }

    /**
     * Cross Domain Identity
     * 
     * <p>Retreives the list of identities from other linked accounts.
     * 
     * @param identityId A Prove-generated unique ID for a specific identity.
     * @param v3CrossDomainIdentityRequest Request body for the V3 Identity Cross Domain API.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3CrossDomainIdentityResponse v3CrossDomainIdentity(String identityId, Optional<? extends V3CrossDomainIdentityRequest> v3CrossDomainIdentityRequest) throws Exception {
        com.prove.proveapi.models.operations.V3CrossDomainIdentityRequest request =
            com.prove.proveapi.models.operations.V3CrossDomainIdentityRequest
                .builder()
                .identityId(identityId)
                .v3CrossDomainIdentityRequest(v3CrossDomainIdentityRequest)
                .build();
        RequestOperation<com.prove.proveapi.models.operations.V3CrossDomainIdentityRequest, V3CrossDomainIdentityResponse> operation
              = new V3CrossDomainIdentity.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Deactivate Identity
     * 
     * <p>Stops webhook notifications without disenrolling the identity.
     * 
     * @return The call builder
     */
    public V3DeactivateIdentityRequestBuilder v3DeactivateIdentity() {
        return new V3DeactivateIdentityRequestBuilder(sdkConfiguration);
    }

    /**
     * Deactivate Identity
     * 
     * <p>Stops webhook notifications without disenrolling the identity.
     * 
     * @param identityId A Prove-generated unique ID for a specific identity.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DeactivateIdentityResponse v3DeactivateIdentity(String identityId) throws Exception {
        return v3DeactivateIdentity(identityId, Optional.empty());
    }

    /**
     * Deactivate Identity
     * 
     * <p>Stops webhook notifications without disenrolling the identity.
     * 
     * @param identityId A Prove-generated unique ID for a specific identity.
     * @param v3IdentityDeactivateRequest Request body for the V3 Deactivate Identity API.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DeactivateIdentityResponse v3DeactivateIdentity(String identityId, Optional<? extends V3IdentityDeactivateRequest> v3IdentityDeactivateRequest) throws Exception {
        V3DeactivateIdentityRequest request =
            V3DeactivateIdentityRequest
                .builder()
                .identityId(identityId)
                .v3IdentityDeactivateRequest(v3IdentityDeactivateRequest)
                .build();
        RequestOperation<V3DeactivateIdentityRequest, V3DeactivateIdentityResponse> operation
              = new V3DeactivateIdentity.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Identities By Phone Number
     * 
     * <p>Return list of all identities you have enrolled that are associated with this phone number.
     * 
     * @return The call builder
     */
    public V3GetIdentitiesByPhoneNumberRequestBuilder v3GetIdentitiesByPhoneNumber() {
        return new V3GetIdentitiesByPhoneNumberRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Identities By Phone Number
     * 
     * <p>Return list of all identities you have enrolled that are associated with this phone number.
     * 
     * @param mobileNumber The phone number to find identities for. US phone numbers can be passed in with or without a leading +1. Acceptable characters are: alphanumeric with symbols '+'.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetIdentitiesByPhoneNumberResponse v3GetIdentitiesByPhoneNumber(String mobileNumber) throws Exception {
        return v3GetIdentitiesByPhoneNumber(mobileNumber, Optional.empty());
    }

    /**
     * Get Identities By Phone Number
     * 
     * <p>Return list of all identities you have enrolled that are associated with this phone number.
     * 
     * @param mobileNumber The phone number to find identities for. US phone numbers can be passed in with or without a leading +1. Acceptable characters are: alphanumeric with symbols '+'.
     * @param clientRequestId A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetIdentitiesByPhoneNumberResponse v3GetIdentitiesByPhoneNumber(String mobileNumber, Optional<String> clientRequestId) throws Exception {
        V3GetIdentitiesByPhoneNumberRequest request =
            V3GetIdentitiesByPhoneNumberRequest
                .builder()
                .mobileNumber(mobileNumber)
                .clientRequestId(clientRequestId)
                .build();
        RequestOperation<V3GetIdentitiesByPhoneNumberRequest, V3GetIdentitiesByPhoneNumberResponse> operation
              = new V3GetIdentitiesByPhoneNumber.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
